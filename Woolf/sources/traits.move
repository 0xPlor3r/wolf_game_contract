module woolf_deployer::traits {
    use std::error;
    use std::string::{Self, String};
    use std::vector;
    use std::debug;
    use std::option::{Self, Option};
    use aptos_std::table::Table;
    use aptos_std::table;
    use aptos_token::token::{Self, TokenId};
    use aptos_token::property_map;

    use woolf_deployer::base64;
    use woolf_deployer::token_helper;
    #[test_only]
    use std::signer;

    friend woolf_deployer::woolf;
    friend woolf_deployer::barn;

    const EMISMATCHED_INPUT: u64 = 1;
    const ETOKEN_NOT_FOUND: u64 = 2;

    // struct to store each trait's data for metadata and rendering
    struct Trait has store, drop, copy {
        name: String,
        png: String,
    }

    struct TraitData {
        items: Table<u8, Trait>
    }

    struct Data has key {
        trait_types: vector<String>,
        trait_data: Table<u8, Table<u8, Trait>>,
        // {trait_type => {id => trait}}
        alphas: vector<vector<u8>>,
        token_traits: Table<TokenId, SheepWolf>,
    }

    struct SheepWolf has drop, store, copy, key {
        is_sheep: bool,
        fur: u8,
        head: u8,
        ears: u8,
        eyes: u8,
        nose: u8,
        mouth: u8,
        neck: u8,
        feet: u8,
        alpha_index: u8,
    }

    const A: vector<vector<u8>> = vector[b"12", b"2343"];

    public(friend) fun initialize(account: &signer) acquires Data {
        let trait_types: vector<String> = vector[
            string::utf8(b"Fur"),
            string::utf8(b"Head"),
            string::utf8(b"Ears"),
            string::utf8(b"Eyes"),
            string::utf8(b"Nose"),
            string::utf8(b"Mouth"),
            string::utf8(b"Neck"),
            string::utf8(b"Feet"),
            string::utf8(b"Alpha"),
        ];
        let trait_data: Table<u8, Table<u8, Trait>> = table::new();
        let alphas = vector[b"8", b"7", b"6", b"5"];

        move_to(account, Data { trait_types, trait_data, alphas, token_traits: table::new() });
        upload_traits(0, vector<u8>[0,1,2,3,4], vector[
            Trait { name: string::utf8(b"Gray"), png: string::utf8(b"iVBORw0KGgoAAAANSUhEUgAAACAAAAAgBAMAAACBVGfHAAAAGFBMVEUAAACgoKAAAADfvqd8fHxUVFSyjXMTERAArvWNAAAAAXRSTlMAQObYZgAAARFJREFUKM9V0cGqgzAQBdDiH9yQ7uNU8/YK3Y+MPyDJD0Rw3dXr779rtH3tMAgebi4YL3UkiDRyeU0jmIAOEs73Dh6AQt0hnQEkVQ9XA2YKxY6GUANJGeB6haswm14BrmKqJ/pkWXFVtEAgTCXTuG7whN5u934pmRvHlmf6ZSzldhduWQe29nGL61jnHtfOXZpFlhOGRfaOlN8AqGPp/AHYwd7gj4R+JIylCe4fPEu/wREM8YD26Eh6RgZw2JFNIfu06hWBsIup8uFNeWV9Tqre4D2VN1Yjprw0PsEAI5SZm+acKjQU7sSvlMf556SIRJGflVBlK9sjbuF3fME6PB9xDM/nCXEdmBrZeI6I7EUV/gDoXlOpQvhhEgAAAABJRU5ErkJggg==")},
            Trait { name: string::utf8(b"Brown"), png: string::utf8(b"iVBORw0KGgoAAAANSUhEUgAAACAAAAAgBAMAAACBVGfHAAAAFVBMVEUAAACyjXMAAADfvqeUXFl3RkwTERCfc+i4AAAAAXRSTlMAQObYZgAAAQlJREFUKM9V0UGOgzAMBdCKG3yT7mMXZl84gZG5AEr2nU3vf4T5BNppLQuJp58vES5tLJt1dnlNZ1iAAZbP9wEJgMPlkCEAknuCtECEw7FjILdAcQa4ySEN1vArwHUs7cRYojquDgUyYZFK48qUCGPc7uMmlauz8sy4zSK3u3Gln9g6KrSf29y1H+TSbbadMG22d5T6BsCFpesHYId4QzoS/pEIlhbIPySWfoMQAnqAHh3Fz8gEDjtqOGwf9eTIhF3CnY8Uzisba3FPgZSovLEWCeel8QkGGKGs3LLW0qCjcBd+pT3OP2dipmY/PaEJBA9F/p1f0E/Ph875+TxB+4mpmY3nmNle1OAPuP9KNkOoX8MAAAAASUVORK5CYII=")},
            Trait { name: string::utf8(b"White"), png: string::utf8(b"iVBORw0KGgoAAAANSUhEUgAAACAAAAAgBAMAAACBVGfHAAAAGFBMVEUAAAD///8AAADfvqfU1NSgoKCyjXMTERDoC1piAAAAAXRSTlMAQObYZgAAARNJREFUKM9VkbGKwzAQRE3+YIzSyxtL19uQfs2a6430AzK4TnX5/RvLTi43DAI9Zge0aqrEi1ykeekimIAe4s97DwdAoe1BegOIVB3aGjBTKHZo8DWQlAHaKdoKZtMrQCumOhGSZcVV0QGeYCqZjG4HRxDsdg9LyXQcO86EZSzldhe6rANbQ9ziOlbd49q3zWWR5QTDIntHym8AKEds/gDYgb2BOxL6kTCWJrR/wLH0P2gJDPEA3dGR9IwMoNiRTSG7OnUKT7ATU+XhTLmykBPXaXCOlBurEVMujSe+GyqQzHSac/J17ST0xFfK4/w5KSJR5GslqGQr2yNu/md8gXV4PuLon88TxHVgamTjKRHZiyr4BfrNU9BDNuzNAAAAAElFTkSuQmCC")},
            Trait { name: string::utf8(b"Black"), png: string::utf8(b"iVBORw0KGgoAAAANSUhEUgAAACAAAAAgBAMAAACBVGfHAAAAFVBMVEUAAAAAAABUVFTfvqcnJyeyjXMTERCh6BJhAAAAAXRSTlMAQObYZgAAAQBJREFUKM9V0NFthDAQBFCuAw+x8++RG0DoCvBqG7AQ//cT+i8hYwO5y2pliefZFfI0CgF4YLrrAVYyEuH6jiwkjZZPiU6KzArzCLjrkh2dYQSiKaAuxjygumVSbaxjAtGhS+NMBkFtkKnzUgTwryfQeqd11gywtiZTt23RVqQ9beuoZ9pi1n8DFyxA3xHfQJpGvH4AO/gflDNhHwnX0sj8hqKl/yELnOmE+dwRTZEzoNIOuBG9ZivGIOjiZjqKm54MGrLiLEWqFxsRNz2aTk2oIKnqWBEFPTKqRh2v6ZIGJOB7EwzZ2/5Ke/hZb9iW45XWcBwXpG1Rag3TXQD6ogG/hxdGus2GU1IAAAAASUVORK5CYII=")},
            Trait { name: string::utf8(b"Survivor"), png: string::utf8(b"iVBORw0KGgoAAAANSUhEUgAAACAAAAAgBAMAAACBVGfHAAAAG1BMVEUAAAAAAADfvqf////U1NSgoKDaPDayjXMTERC+6f+SAAAAAXRSTlMAQObYZgAAARFJREFUKM9dzjGOwjAQBVDnBh6I19smDXX0Az2agT5SfIAIyb3TpKVbjr1jJwGJr2n89GdkU0KWqCKzpyJcgRpkt3eNHgCDu1VqAZSYe3SlIMJgZBTYUhhZCzo9oytwEz4DOoxr2XCjBMaZcQSswjUFNZ2u6RWcHE5uSEHHt0fdcUOb0uFEOmlu9Krzi5/bkpOf685UAw0bNAPlG2N4A3DXFbl94PKYFOQNlxgz8BumH5pMNaLbwVYmH/2A0SjINzD8ClSgCsJaKTc3UKGSaNedMDL38sifsHtFWDjGXZzKLdxjzlpRcSFOWqCnKUKUiDzR76xQZEnL0y/2r91hbl5P39rXawM/N9pqrdlDRPlQgX8Br1cKW3BhdQAAAABJRU5ErkJggg==")}
        ]);

        upload_traits(1, vector<u8>[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19], vector[
            Trait { name: string::utf8(b"Curved Brown Horns"), png: string::utf8(b"iVBORw0KGgoAAAANSUhEUgAAACAAAAAgAgMAAAAOFJJnAAAADFBMVEUAAAAAAACUXFl3RkxwD5rMAAAAAXRSTlMAQObYZgAAAExJREFUGNNjgAPGEBAZysDAthLEe+XAIAXEDOyrJjBUV01gYJBbvoShch6IMXMJQ1U5SKpsCYPcVpBioDz7BZB2eQcGRgcQg5VheAAAslgQppQv9PkAAAAASUVORK5CYII=")},
            Trait { name: string::utf8(b"Silky"), png: string::utf8(b"iVBORw0KGgoAAAANSUhEUgAAACAAAAAgAgMAAAAOFJJnAAAADFBMVEUAAACxHRgAAADaPDblLkmbAAAAAXRSTlMAQObYZgAAAEZJREFUGNNjYGBYtWrVCgYgYAoNDa0DMTiBjPgGGKNpAZTR/QPKWJsAZUxtgDKmARVzrQKC5SBtYDMeQBlMFQxQsIBhCAIAtFEYSeIKfXkAAAAASUVORK5CYII=")},
            Trait { name: string::utf8(b"Sun Hat"), png: string::utf8(b"iVBORw0KGgoAAAANSUhEUgAAACAAAAAgBAMAAACBVGfHAAAAGFBMVEUAAADft1IAAACygywBAAGygy2zgyyygiwt9VdQAAAAAXRSTlMAQObYZgAAAGZJREFUKM/tzbENgCAQheGLG+AE+DgXELA2SGLv/sP4RCIJtaVfx8/lTmiAIiEDUh2msjXMfXBdQJFAtmw0zaic9ywNZPcRbwICA+Xpefv1DgtgVRVI/AriIldXcP7kFWkG3eT3uQv4TxEdSz1gaQAAAABJRU5ErkJggg==")},
            Trait { name: string::utf8(b"Cowboy Hat"), png: string::utf8(b"iVBORw0KGgoAAAANSUhEUgAAACAAAAAgBAMAAACBVGfHAAAAFVBMVEUAAAAAAACUXFlrTVl3RkyyhH5PPVAKPoY5AAAAAXRSTlMAQObYZgAAAFlJREFUKM9jAAFGQTAQYIABERclIAgNhPEZXcACSqoCaAJKAmCeAANjWrIxGAiAeY7IAqJARSKCYjABQ8FAiAlQM0JDQ8GmCAIFnCCmKkJsATkK5rRRMCAAAEwDEcWhVXTnAAAAAElFTkSuQmCC")},
            Trait { name: string::utf8(b"Mailman"), png: string::utf8(b"iVBORw0KGgoAAAANSUhEUgAAACAAAAAgAgMAAAAOFJJnAAAADFBMVEUAAAAkUpkAAAAUPVyUvX2gAAAAAXRSTlMAQObYZgAAAD1JREFUGNNjYGBYtWrVCgYgYPobGhoGYnB/DQ0NbUBm6F8FMhKwMriA2uEiS0GK9wNlokDmaAGlFjAMbQAATiUbPfY9QmIAAAAASUVORK5CYII=")},
            Trait { name: string::utf8(b"Beanie"), png: string::utf8(b"iVBORw0KGgoAAAANSUhEUgAAACAAAAAgAgMAAAAOFJJnAAAADFBMVEUAAADesC8AAACygyzig7/6AAAAAXRSTlMAQObYZgAAADRJREFUGNNjYGBYtWrVCgYgYPoaGhqGg7EKCEAM7qtfa+MbgAz98Kvx4Q8wGXA1cF1DGwAAvHUdFaOI7ngAAAAASUVORK5CYII=")},
            Trait { name: string::utf8(b"None"), png: string::utf8(b"iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAQAAAC1HAwCAAAAC0lEQVR42mNkYAAAAAYAAjCB0C8AAAAASUVORK5CYII=")},
            Trait { name: string::utf8(b"Pointy Brown Horns"), png: string::utf8(b"iVBORw0KGgoAAAANSUhEUgAAACAAAAAgAgMAAAAOFJJnAAAADFBMVEUAAAAAAACUXFl3RkxwD5rMAAAAAXRSTlMAQObYZgAAADVJREFUGNNjwASiYJIxgEHKAcRgm8AgNwHEkLrAwL4ExMh2YGB8CVKyFkiUMEAJAQYwMcwAAHIQBuXcyXwPAAAAAElFTkSuQmCC")},
            Trait { name: string::utf8(b"Pointy Golden Horns"), png: string::utf8(b"iVBORw0KGgoAAAANSUhEUgAAACAAAAAgBAMAAACBVGfHAAAAD1BMVEUAAAAAAADesC+ygyzp4iW2FyRIAAAAAXRSTlMAQObYZgAAADdJREFUKM9jIAwYBdE4jCoCCAERRaCAkSNCgZMhkBRGKBFRBjIhShAKQEpAwsgsRoQZDKNgkAAAsRUDNeESnRIAAAAASUVORK5CYII=")},
            Trait { name: string::utf8(b"Blue Horns"), png: string::utf8(b"iVBORw0KGgoAAAANSUhEUgAAACAAAAAgBAMAAACBVGfHAAAAElBMVEUAAAAAAAAAxfAkUpmUXFnp4iXeuZlDAAAAAXRSTlMAQObYZgAAAE1JREFUKM/tirsNwEAIQ6FIz2cCyARhg+y/VPBJVFnginuybAtDf1hlqircMmaqlPZELDyx2e0Z8+C92cM1h+AS8iXQeXVlggDypcOefGhhBSYgB3MPAAAAAElFTkSuQmCC")},
            Trait { name: string::utf8(b"Blue Hat"), png: string::utf8(b"iVBORw0KGgoAAAANSUhEUgAAACAAAAAgBAMAAACBVGfHAAAAFVBMVEUAAAAAxfAUPVwwY9MkUpn///8Xb+CzKPBIAAAAAXRSTlMAQObYZgAAAExJREFUKM9jAAElCFBggAImQ0EgCA0UggmoGAuCQaACmoAoXMBZEAIQAsYIAYQlCGuY3KA6hKECKolQASOoAhdnYwiA6YAbwTAK6AQA8i0NMLnMBUEAAAAASUVORK5CYII=")},
            Trait { name: string::utf8(b"Rainbow Fro"), png: string::utf8(b"iVBORw0KGgoAAAANSUhEUgAAACAAAAAgBAMAAACBVGfHAAAAFVBMVEUAAAAAAAAki0gAxfDp4iWtKZWxHRj6e/wSAAAAAXRSTlMAQObYZgAAAG1JREFUKM/tjs0NgDAIRmED8Kd3cQJDHKCGBXroBsb9R9C2Vk28e/KFCy98AGSYmJGhgmxepFWms3dmi4jqHIpxq5mIjKox5IHtFpHSwFOEl8iRa2mfI8Bo1qSzEwYodB5lQCWg+hkBHwU/H7ED9CEVeXhOdWcAAAAASUVORK5CYII=")},
            Trait { name: string::utf8(b"Capone"), png: string::utf8(b"iVBORw0KGgoAAAANSUhEUgAAACAAAAAgAgMAAAAOFJJnAAAACVBMVEUAAAAnJycAAADXzrjdAAAAAXRSTlMAQObYZgAAAC5JREFUGNNjYGBaBQQMQMC1NDQ0tAHEmEo8g2sVGDQwaAF1A0ECgxZEZAHDsAAAhfQbk6I91xcAAAAASUVORK5CYII=")},
            Trait { name: string::utf8(b"Visor"), png: string::utf8(b"iVBORw0KGgoAAAANSUhEUgAAACAAAAAgBAMAAACBVGfHAAAAElBMVEUAAAAAAAAAxfD///9RzuowY9OA/ye6AAAAAXRSTlMAQObYZgAAAC1JREFUKM9joBIQhAEBqICIszEE4BJgRNciGqQEAYpQBaFKUCCAbgnDKKATAADXjwhxIw22hAAAAABJRU5ErkJggg==")},
            Trait { name: string::utf8(b"Fedora"), png: string::utf8(b"iVBORw0KGgoAAAANSUhEUgAAACAAAAAgAgMAAAAOFJJnAAAADFBMVEUAAABTMG8AAAA4HUwse/DbAAAAAXRSTlMAQObYZgAAAEZJREFUGNNjYGBYtWrVCgYQ2BsaGgGimb6GhoYhMxZAGBoMO7iBjNCGGQx63FeBjKYEBu71IEZmAwPT/1AgCAObBzZxeAAAAv4b7SQW3IgAAAAASUVORK5CYII=")},
            Trait { name: string::utf8(b"Red Cap"), png: string::utf8(b"iVBORw0KGgoAAAANSUhEUgAAACAAAAAgBAMAAACBVGfHAAAAElBMVEUAAACxHRgAAACGIickUpkwY9MrfZpjAAAAAXRSTlMAQObYZgAAADtJREFUKM9jAAElCFBggAImY2VBQUEhQSGYgLKRoSAQKAoqUEuASUkJVUDFBQhcQ4EArgIBFBhGwcAAAGyiDXTUrjeJAAAAAElFTkSuQmCC")},
            Trait { name: string::utf8(b"Santa"), png: string::utf8(b"iVBORw0KGgoAAAANSUhEUgAAACAAAAAgBAMAAACBVGfHAAAAFVBMVEUAAAAAAAD////aPDbU1NSzs7OxRF5xtqTLAAAAAXRSTlMAQObYZgAAAGFJREFUKM9jAAFBGGCAAjFjMBAzFoDwGZMhAobJBAUSoQKiLk5KTkoqSqqiihAFIS4qSkoqQBioJAARcFICAiARGAQVcFFyAnKBKkIhAqEuQK6TipNqoCADqkMFGEYBXQAA18AUiMy3ysEAAAAASUVORK5CYII=")},
            Trait { name: string::utf8(b"Curved Golden Horns"), png: string::utf8(b"iVBORw0KGgoAAAANSUhEUgAAACAAAAAgBAMAAACBVGfHAAAAD1BMVEUAAAAAAADesC+ygyzp4iW2FyRIAAAAAXRSTlMAQObYZgAAAF1JREFUKM/tjsENgEAIBM8OwLUBuGtAtAGS678mIZH4sAA/7mMgy0Joby1M1TInt+k1OicF1cYdgaoHO7JkwBQxg7iVIZ6GArWCdVD4nesoVNLfnw8OSgZK3H59ogviAQfA0IBaBAAAAABJRU5ErkJggg==")},
            Trait { name: string::utf8(b"White Cap"), png: string::utf8(b"iVBORw0KGgoAAAANSUhEUgAAACAAAAAgBAMAAACBVGfHAAAAGFBMVEUAAAD///8AAACf3flRzuqxHRjaPDaGIifUMawjAAAAAXRSTlMAQObYZgAAADpJREFUKM9jAAElCFBggAImF2NjQSAQggmoOBsbCoKAArUEmJSUUAXUy0NBICwNCKAqEECBYRQMDAAAXlYPxDEH70IAAAAASUVORK5CYII=")},
            Trait { name: string::utf8(b"Bucket Hat"), png: string::utf8(b"iVBORw0KGgoAAAANSUhEUgAAACAAAAAgBAMAAACBVGfHAAAAD1BMVEUAAAAUPVwAAAD////U1NQeCbBYAAAAAXRSTlMAQObYZgAAADtJREFUKM9jAAImJShggAJFQShQIFpAxdkYAqACTC4wASO4DhQ9TIIIIARTgFACVYBQAncm3LGjgA4AALPMDRDZPu+xAAAAAElFTkSuQmCC")}
        ]);

        upload_traits(2, vector<u8>[0,1,2,3,4,5], vector[
            Trait { name: string::utf8(b"Diamond Stud"), png: string::utf8(b"iVBORw0KGgoAAAANSUhEUgAAACAAAAAgAgMAAAAOFJJnAAAADFBMVEUAAABRzuqf3fkAxfD1N1m7AAAAAXRSTlMAQObYZgAAACFJREFUGNNjoAdwABEsQNwAYnAAcQGIwQ7EASAGK8OgBQAUogGZJVeZqAAAAABJRU5ErkJggg==")},
            Trait { name: string::utf8(b"Gold Bling"), png: string::utf8(b"iVBORw0KGgoAAAANSUhEUgAAACAAAAAgAgMAAAAOFJJnAAAADFBMVEUAAACygyzesC/p4iXHD2p5AAAAAXRSTlMAQObYZgAAACxJREFUGNNjoCs4ACJ4GBiYN4AY1gwMbDkgRtoBBsYJIIYkEDuAGCwMgwQAAKzKBEH6IVfBAAAAAElFTkSuQmCC")},
            Trait { name: string::utf8(b"Gold Hoop"), png: string::utf8(b"iVBORw0KGgoAAAANSUhEUgAAACAAAAAgAgMAAAAOFJJnAAAADFBMVEUAAADesC/p4iWygywWMD4DAAAAAXRSTlMAQObYZgAAAC1JREFUGNNjoAdoABEcDAxMYJ4CkGEAYigDGQIghiIDAyOYIQjEDiAGC8MgAQALcAGZnwuuxQAAAABJRU5ErkJggg==")},
            Trait { name: string::utf8(b"Two Gold Piercings"), png: string::utf8(b"iVBORw0KGgoAAAANSUhEUgAAACAAAAAgAgMAAAAOFJJnAAAACVBMVEUAAADp4iXesC+/0+PiAAAAAXRSTlMAQObYZgAAABpJREFUGNNjoANgFACRggwMTAoghhJCZPADAF5gAImSV/7gAAAAAElFTkSuQmCC")},
            Trait { name: string::utf8(b"None"), png: string::utf8(b"iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAQAAAC1HAwCAAAAC0lEQVR42mNkYAAAAAYAAjCB0C8AAAAASUVORK5CYII=")},
            Trait { name: string::utf8(b"Diamond Bling"), png: string::utf8(b"iVBORw0KGgoAAAANSUhEUgAAACAAAAAgAgMAAAAOFJJnAAAACVBMVEUAAAAAxfCf3fkiSJbrAAAAAXRSTlMAQObYZgAAACNJREFUGNNjoCtwABEsDAyME0AMSQYGthQQI80BJoJQM0gAANAXAu1JLL1KAAAAAElFTkSuQmCC")}
        ]);

        upload_traits(3, vector<u8>[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27], vector[
            Trait { name: string::utf8(b"Cyclops"), png: string::utf8(b"iVBORw0KGgoAAAANSUhEUgAAACAAAAAgAgMAAAAOFJJnAAAACVBMVEUAAAAAAAD///+D3c/SAAAAAXRSTlMAQObYZgAAAB1JREFUGNNjoCkIdYDQjKsmQBhsy5bARRBqBjEAAGQRBPHyQj4NAAAAAElFTkSuQmCC")},
            Trait { name: string::utf8(b"Staring Contest"), png: string::utf8(b"iVBORw0KGgoAAAANSUhEUgAAACAAAAAgAgMAAAAOFJJnAAAACVBMVEUAAAAAAAD///+D3c/SAAAAAXRSTlMAQObYZgAAABxJREFUGNNjoAtgdQiBMKQmroQwJCfORIgMYgAA/C8EhQfzzFEAAAAASUVORK5CYII=")},
            Trait { name: string::utf8(b"Fearless"), png: string::utf8(b"iVBORw0KGgoAAAANSUhEUgAAACAAAAAgBAMAAACBVGfHAAAAD1BMVEUAAAAAAAD///8AxfAUPVwGtYjRAAAAAXRSTlMAQObYZgAAACdJREFUKM9jGOqAEYgFkAVEBBgYHZEFhIEChsgCQkABRUwzRgEWAABnSQEiql7SnwAAAABJRU5ErkJggg==")},
            Trait { name: string::utf8(b"Fearful"), png: string::utf8(b"iVBORw0KGgoAAAANSUhEUgAAACAAAAAgAQMAAABJtOi3AAAABlBMVEUAAAAAAAClZ7nPAAAAAXRSTlMAQObYZgAAABRJREFUCNdjIBcIOAAJBQUkLk0AAFQwAOF0Uq3NAAAAAElFTkSuQmCC")},
            Trait { name: string::utf8(b"Squint Right"), png: string::utf8(b"iVBORw0KGgoAAAANSUhEUgAAACAAAAAgAgMAAAAOFJJnAAAADFBMVEUAAAAAAACyjXP///9SqdirAAAAAXRSTlMAQObYZgAAAB5JREFUGNNjoC8QdRB1ADNsD9geADO0GrQaGAYvAACPDAP5rXCA5AAAAABJRU5ErkJggg==")},
            Trait { name: string::utf8(b"Dork"), png: string::utf8(b"iVBORw0KGgoAAAANSUhEUgAAACAAAAAgBAMAAACBVGfHAAAAD1BMVEUAAACf3fkAAAD///8AxfCCQkOpAAAAAXRSTlMAQObYZgAAAChJREFUKM9jGNqASUlJiQGIFeAijsaCSkDMgBAQNARhZAFBMB4FRAAA9SgD5/qQtmEAAAAASUVORK5CYII=")},
            Trait { name: string::utf8(b"OMG"), png: string::utf8(b"iVBORw0KGgoAAAANSUhEUgAAACAAAAAgAgMAAAAOFJJnAAAACVBMVEUAAAD///8AAABzxoNxAAAAAXRSTlMAQObYZgAAABVJREFUGNNjoC8QBUIwkARCuMggBgBYigCHfySWeAAAAABJRU5ErkJggg==")},
            Trait { name: string::utf8(b"Angry"), png: string::utf8(b"iVBORw0KGgoAAAANSUhEUgAAACAAAAAgAQMAAABJtOi3AAAABlBMVEUAAAAAAAClZ7nPAAAAAXRSTlMAQObYZgAAABRJREFUCNdjIBcIOAAJjgYkLk0AAG9gASkMl47GAAAAAElFTkSuQmCC")},
            Trait { name: string::utf8(b"Rolling"), png: string::utf8(b"iVBORw0KGgoAAAANSUhEUgAAACAAAAAgAgMAAAAOFJJnAAAACVBMVEUAAAAAAAD///+D3c/SAAAAAXRSTlMAQObYZgAAABtJREFUGNNjoAtgdQiBMCQnzoQwpCauZBgKAAAqTQMxWBpKpAAAAABJRU5ErkJggg==")},
            Trait { name: string::utf8(b"Red Glasses"), png: string::utf8(b"iVBORw0KGgoAAAANSUhEUgAAACAAAAAgAgMAAAAOFJJnAAAADFBMVEUAAADaPDb///+f3flbDE79AAAAAXRSTlMAQObYZgAAACBJREFUGNNjoAdgDA0IDQWzqqZWTYAwJkAZQKkAhsELAIiMBsjrryLrAAAAAElFTkSuQmCC")},
            Trait { name: string::utf8(b"Basic Sun Protection"), png: string::utf8(b"iVBORw0KGgoAAAANSUhEUgAAACAAAAAgAgMAAAAOFJJnAAAACVBMVEUAAAAAAAD///+D3c/SAAAAAXRSTlMAQObYZgAAACJJREFUGNNjoAdgDAUCMCsyIDIAzAgLCIMwRB1EHRgGLwAAHzIEnvQWWWQAAAAASUVORK5CYII=")},
            Trait { name: string::utf8(b"Big Blue"), png: string::utf8(b"iVBORw0KGgoAAAANSUhEUgAAACAAAAAgBAMAAACBVGfHAAAAFVBMVEUAAAAAAAD///8wY9MAxfDU1NSzs7M1QfpOAAAAAXRSTlMAQObYZgAAADZJREFUKM9jGOKAUVCAQVAQSYBJTJBBMVEASYVpIINwKJIAs5ESg7GSAkKAxUmBwUWJYRRgAQBXoAOXwF4RywAAAABJRU5ErkJggg==")},
            Trait { name: string::utf8(b"Night Vision Visor"), png: string::utf8(b"iVBORw0KGgoAAAANSUhEUgAAACAAAAAgBAMAAACBVGfHAAAAGFBMVEUAAAAAAADH242Ry2kki0gYbUUlrjsRTS0uPD9QAAAAAXRSTlMAQObYZgAAACJJREFUKM9jGNqAURAK4CIhyUpKyinhBbgFoDoEGEYBYQAAHNsFo8gXz6AAAAAASUVORK5CYII=")},
            Trait { name: string::utf8(b"Sleepy"), png: string::utf8(b"iVBORw0KGgoAAAANSUhEUgAAACAAAAAgAgMAAAAOFJJnAAAADFBMVEUAAADaPDYAAACxHRiFjUoGAAAAAXRSTlMAQObYZgAAAB1JREFUGNNjoC/gdTCFMEwDrjqAGVoLVjUwDF4AAJfkBBFicZT9AAAAAElFTkSuQmCC")},
            Trait { name: string::utf8(b"Black Glasses"), png: string::utf8(b"iVBORw0KGgoAAAANSUhEUgAAACAAAAAgAgMAAAAOFJJnAAAACVBMVEUAAAAAAACf3fmF2+fnAAAAAXRSTlMAQObYZgAAACBJREFUGNNjoAdgDA0IDQWzsqZmTYAwJkAZQKkAhsELAF2sBoi6TPWPAAAAAElFTkSuQmCC")},
            Trait { name: string::utf8(b"Rainbow Sunnies"), png: string::utf8(b"iVBORw0KGgoAAAANSUhEUgAAACAAAAAgBAMAAACBVGfHAAAAKlBMVEUAAAD////p4iWRy2kkUpmtKZUlrjsAxfAwY9O6Rp3esC/aPDaGIiexHRjD61CUAAAAAXRSTlMAQObYZgAAADFJREFUKM9jGNqA5/YiIbPkCpFIuMguRWUG80ZXhBKgAgZkBQyMygkMjK4TGEYBEQAAmnoIPpGtZsYAAAAASUVORK5CYII=")},
            Trait { name: string::utf8(b"Bloodshot"), png: string::utf8(b"iVBORw0KGgoAAAANSUhEUgAAACAAAAAgAgMAAAAOFJJnAAAADFBMVEUAAACxHRgAAAD////ZxzMJAAAAAXRSTlMAQObYZgAAABtJREFUGNNjoC/QYlgBYYg3xEEYog1hDIMYAADBZgKzhJLdVwAAAABJRU5ErkJggg==")},
            Trait { name: string::utf8(b"Small Blue"), png: string::utf8(b"iVBORw0KGgoAAAANSUhEUgAAACAAAAAgBAMAAACBVGfHAAAAElBMVEUAAAAAAAD///8AxfDU1NSzs7N9AqmZAAAAAXRSTlMAQObYZgAAACtJREFUKM9jGG6AUVCAQVAQSYBJVIBBMRBZhQhQhSOSALORAoOxEsMowAIAWw4B/3P/5x0AAAAASUVORK5CYII=")},
            Trait { name: string::utf8(b"X Ray"), png: string::utf8(b"iVBORw0KGgoAAAANSUhEUgAAACAAAAAgBAMAAACBVGfHAAAAG1BMVEUAAADU1NQnJydUVFSzs7OgoKB8fHwAAAD///9+jYp9AAAAAXRSTlMAQObYZgAAACdJREFUKM9jGFrAgL2cAYgUYHwmsxDBRpEwIyW4CqiAAhECo4AwAAAyZQixBvvRRwAAAABJRU5ErkJggg==")},
            Trait { name: string::utf8(b"Livid"), png: string::utf8(b"iVBORw0KGgoAAAANSUhEUgAAACAAAAAgAgMAAAAOFJJnAAAACVBMVEUAAAAAAADaPDa/NLVAAAAAAXRSTlMAQObYZgAAAB5JREFUGNNjoA9wEIAyBBwgNKuDKIQhOSHNgWHwAgB6SgJKNOqwvwAAAABJRU5ErkJggg==")},
            Trait { name: string::utf8(b"Squint Left"), png: string::utf8(b"iVBORw0KGgoAAAANSUhEUgAAACAAAAAgAgMAAAAOFJJnAAAACVBMVEUAAAAAAAD///+D3c/SAAAAAXRSTlMAQObYZgAAABZJREFUGNNjGCAg6hAKYag1zGIYxAAANOEB67hwr/gAAAAASUVORK5CYII=")},
            Trait { name: string::utf8(b"Confused"), png: string::utf8(b"iVBORw0KGgoAAAANSUhEUgAAACAAAAAgBAMAAACBVGfHAAAAElBMVEUAAAAAAAD///8wY9PU1NQkUpmlxgFPAAAAAXRSTlMAQObYZgAAACxJREFUKM9jGAaAUVAAiSfIwCDiHIgk6yzAIKRsiCSgBBRQUkTWAjFjFGACANkKAlE1Ptk/AAAAAElFTkSuQmCC")},
            Trait { name: string::utf8(b"Face Painted"), png: string::utf8(b"iVBORw0KGgoAAAANSUhEUgAAACAAAAAgBAMAAACBVGfHAAAAElBMVEUAAAD///8AAADaPDaGIiexHRgAd/VpAAAAAXRSTlMAQObYZgAAAB9JREFUKM9jGHZAUACIUAQUGBTxCrgaAIkQA4ZRgAkAU8sCAFzFgE4AAAAASUVORK5CYII=")},
            Trait { name: string::utf8(b"Leafy Green"), png: string::utf8(b"iVBORw0KGgoAAAANSUhEUgAAACAAAAAgBAMAAACBVGfHAAAAElBMVEUAAAAAAAD///9y4cMYbUUVq5Gzb1utAAAAAXRSTlMAQObYZgAAAC1JREFUKM9jGOKAUVCAQVAQSUBI0JFRUUQASUAokFFRFVnA2ZBRxViAYRQQAQBL7gKpc11X4gAAAABJRU5ErkJggg==")},
            Trait { name: string::utf8(b"Fake Glasses"), png: string::utf8(b"iVBORw0KGgoAAAANSUhEUgAAACAAAAAgAgMAAAAOFJJnAAAACVBMVEUAAAAAAAD///+D3c/SAAAAAXRSTlMAQObYZgAAACBJREFUGNNjoAtgdRCFMKQmZDmAGZFT00LgInA1gw8AAER0BQWlV3LJAAAAAElFTkSuQmCC")},
            Trait { name: string::utf8(b"Happy"), png: string::utf8(b"iVBORw0KGgoAAAANSUhEUgAAACAAAAAgAQMAAABJtOi3AAAABlBMVEUAAAAAAAClZ7nPAAAAAXRSTlMAQObYZgAAABRJREFUCNdjoAgYJAAJjwkQgiYAAM74AkGPa/xKAAAAAElFTkSuQmCC")},
            Trait { name: string::utf8(b"Cross Eyed"), png: string::utf8(b"iVBORw0KGgoAAAANSUhEUgAAACAAAAAgAgMAAAAOFJJnAAAACVBMVEUAAAD///8AAABzxoNxAAAAAXRSTlMAQObYZgAAABpJREFUGNNjoAtgaliAJsLoEABlNExgGMQAANhaAsVGXr3gAAAAAElFTkSuQmCC")},
            Trait { name: string::utf8(b"Spacey"), png: string::utf8(b"iVBORw0KGgoAAAANSUhEUgAAACAAAAAgAgMAAAAOFJJnAAAACVBMVEUAAAAAAAD///+D3c/SAAAAAXRSTlMAQObYZgAAABtJREFUGNNjoC9gdQiBMKQmroQwJCfOZBjEAAAONgMxlwEXawAAAABJRU5ErkJggg==")}
        ]);

        upload_traits(4, vector<u8>[0,1,2,3,4,5,6,7,8,9], vector[
            Trait { name: string::utf8(b"Dots"), png: string::utf8(b"iVBORw0KGgoAAAANSUhEUgAAACAAAAAgAQMAAABJtOi3AAAABlBMVEUAAAAAAAClZ7nPAAAAAXRSTlMAQObYZgAAAA5JREFUCNdjoA1gpZZBAAINAAaOzYqnAAAAAElFTkSuQmCC")},
            Trait { name: string::utf8(b"Wide"), png: string::utf8(b"iVBORw0KGgoAAAANSUhEUgAAACAAAAAgAgMAAAAOFJJnAAAACVBMVEUAAAAAAACyjXMCmAU+AAAAAXRSTlMAQObYZgAAABNJREFUGNNjGIRAEMZIc2AYaAAAXx4AuAHt6rEAAAAASUVORK5CYII=")},
            Trait { name: string::utf8(b"X"), png: string::utf8(b"iVBORw0KGgoAAAANSUhEUgAAACAAAAAgAgMAAAAOFJJnAAAADFBMVEUAAAAnJycAAABUVFTztD9wAAAAAXRSTlMAQObYZgAAABVJREFUGNNjGDyABcbQhTE4GAYcAAAgKAA6oPTpgwAAAABJRU5ErkJggg==")},
            Trait { name: string::utf8(b"Punched"), png: string::utf8(b"iVBORw0KGgoAAAANSUhEUgAAACAAAAAgAgMAAAAOFJJnAAAACVBMVEUAAAAAAACxHRir/4mtAAAAAXRSTlMAQObYZgAAABJJREFUGNNjGIRAEMZgYhhwAAALcgAU1IRuSQAAAABJRU5ErkJggg==")},
            Trait { name: string::utf8(b"Gold"), png: string::utf8(b"iVBORw0KGgoAAAANSUhEUgAAACAAAAAgAgMAAAAOFJJnAAAADFBMVEUAAADesC+ygyzp4iXM8PRTAAAAAXRSTlMAQObYZgAAABVJREFUGNNjGDyABcbQhTE4GAYcAAAgKAA6oPTpgwAAAABJRU5ErkJggg==")},
            Trait { name: string::utf8(b"Normal"), png: string::utf8(b"iVBORw0KGgoAAAANSUhEUgAAACAAAAAgAQMAAABJtOi3AAAABlBMVEUAAAAAAAClZ7nPAAAAAXRSTlMAQObYZgAAABFJREFUCNdjoDpgBRFM1DINAAK4AAgZ7pXcAAAAAElFTkSuQmCC")},
            Trait { name: string::utf8(b"Dot"), png: string::utf8(b"iVBORw0KGgoAAAANSUhEUgAAACAAAAAgAQMAAABJtOi3AAAABlBMVEUAAAAAAAClZ7nPAAAAAXRSTlMAQObYZgAAAA5JREFUCNdjoDpgoqppAAE8AAPNbYZEAAAAAElFTkSuQmCC")},
            Trait { name: string::utf8(b"Red"), png: string::utf8(b"iVBORw0KGgoAAAANSUhEUgAAACAAAAAgAQMAAABJtOi3AAAABlBMVEUAAACxHRiN+9miAAAAAXRSTlMAQObYZgAAAA5JREFUCNdjoA1gpZZBAAINAAaOzYqnAAAAAElFTkSuQmCC")},
            Trait { name: string::utf8(b"Triangle"), png: string::utf8(b"iVBORw0KGgoAAAANSUhEUgAAACAAAAAgAQMAAABJtOi3AAAABlBMVEUAAAAAAAClZ7nPAAAAAXRSTlMAQObYZgAAABVJREFUCNdjoCZgAhHsIIK/gUpGAgArrwCZZLzKJAAAAABJRU5ErkJggg==")},
            Trait { name: string::utf8(b"U"), png: string::utf8(b"iVBORw0KGgoAAAANSUhEUgAAACAAAAAgAQMAAABJtOi3AAAABlBMVEUAAAAAAAClZ7nPAAAAAXRSTlMAQObYZgAAABJJREFUCNdjoDpgaQASzNQyDQApMwCIejoWBgAAAABJRU5ErkJggg==")}
        ]);

        upload_traits(5, vector<u8>[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15], vector[
            Trait { name: string::utf8(b"Beard"), png: string::utf8(b"iVBORw0KGgoAAAANSUhEUgAAACAAAAAgAgMAAAAOFJJnAAAADFBMVEUAAABUVFQnJycAAABIDEZpAAAAAXRSTlMAQObYZgAAACRJREFUGNNjGAqAMTSABcxo/X9FBMxQZRANADO4Vq1qYKAhAABKYgV/qKbb9AAAAABJRU5ErkJggg==")},
            Trait { name: string::utf8(b"Teasing"), png: string::utf8(b"iVBORw0KGgoAAAANSUhEUgAAACAAAAAgAgMAAAAOFJJnAAAACVBMVEUAAAAAAACxHRir/4mtAAAAAXRSTlMAQObYZgAAABxJREFUGNNjGAqAhYERwmAMDYEKrWqAMrQYaAoA1mICBEG5ud0AAAAASUVORK5CYII=")},
            Trait { name: string::utf8(b"Wide Open Mouth"), png: string::utf8(b"iVBORw0KGgoAAAANSUhEUgAAACAAAAAgAgMAAAAOFJJnAAAACVBMVEUAAAAAAACLK2PMyNAqAAAAAXRSTlMAQObYZgAAABhJREFUGNNjGFKAMTQEyli1BM5ASNEAAACH0gPzIqMenAAAAABJRU5ErkJggg==")},
            Trait { name: string::utf8(b"Big Smile"), png: string::utf8(b"iVBORw0KGgoAAAANSUhEUgAAACAAAAAgAgMAAAAOFJJnAAAACVBMVEUAAAAAAAD///+D3c/SAAAAAXRSTlMAQObYZgAAACBJREFUGNNjGFKANTTUAcxgW7UKwmBctRIqFxrCQAMAAMVABIfzxX3aAAAAAElFTkSuQmCC")},
            Trait { name: string::utf8(b"Pouting"), png: string::utf8(b"iVBORw0KGgoAAAANSUhEUgAAACAAAAAgAQMAAABJtOi3AAAABlBMVEUAAAAAAAClZ7nPAAAAAXRSTlMAQObYZgAAAA5JREFUCNdjoDVgokw7AAEeAAMmmXWWAAAAAElFTkSuQmCC")},
            Trait { name: string::utf8(b"Grillz"), png: string::utf8(b"iVBORw0KGgoAAAANSUhEUgAAACAAAAAgAgMAAAAOFJJnAAAADFBMVEUAAAAAAAD////p4iVEM/MhAAAAAXRSTlMAQObYZgAAAB9JREFUGNNjGFKANTQUwmB7tRPCYNz1BMoIDWGgAQAAy/oEopz4M1EAAAAASUVORK5CYII=")},
            Trait { name: string::utf8(b"Missing Tooth"), png: string::utf8(b"iVBORw0KGgoAAAANSUhEUgAAACAAAAAgAgMAAAAOFJJnAAAADFBMVEUAAAAAAAD///+LK2OK52TNAAAAAXRSTlMAQObYZgAAAB9JREFUGNNjGFKANTQUwmBbvRLCYFy1BCoXGsBAAwAAjNcD/iN6+sgAAAAASUVORK5CYII=")},
            Trait { name: string::utf8(b"Smirk"), png: string::utf8(b"iVBORw0KGgoAAAANSUhEUgAAACAAAAAgAQMAAABJtOi3AAAABlBMVEUAAAAAAAClZ7nPAAAAAXRSTlMAQObYZgAAABJJREFUCNdjoCVQAGL+AxQZAQA7MQDw3RJz6wAAAABJRU5ErkJggg==")},
            Trait { name: string::utf8(b"Mustache"), png: string::utf8(b"iVBORw0KGgoAAAANSUhEUgAAACAAAAAgAgMAAAAOFJJnAAAACVBMVEUAAAAnJycAAADXzrjdAAAAAXRSTlMAQObYZgAAABZJREFUGNNjGAqAMTQAwmDRYmGgLwAAZf8A2SyaZ90AAAAASUVORK5CYII=")},
            Trait { name: string::utf8(b"Neutral"), png: string::utf8(b"iVBORw0KGgoAAAANSUhEUgAAACAAAAAgAQMAAABJtOi3AAAABlBMVEUAAAAAAAClZ7nPAAAAAXRSTlMAQObYZgAAAA9JREFUCNdjoDWw/0CRdgBKQQEwYvMazgAAAABJRU5ErkJggg==")},
            Trait { name: string::utf8(b"Cigarette"), png: string::utf8(b"iVBORw0KGgoAAAANSUhEUgAAACAAAAAgAgMAAAAOFJJnAAAADFBMVEUAAAAAAAD////ft1JteCeNAAAAAXRSTlMAQObYZgAAABVJREFUGNNjGAogNADKeLUEIUIfAABEGwLZXNgLagAAAABJRU5ErkJggg==")},
            Trait { name: string::utf8(b"Cheese"), png: string::utf8(b"iVBORw0KGgoAAAANSUhEUgAAACAAAAAgAgMAAAAOFJJnAAAACVBMVEUAAAAAAAD///+D3c/SAAAAAXRSTlMAQObYZgAAABZJREFUGNNjGFog1AFCM66agBChJQAA+RkCZmh5XfwAAAAASUVORK5CYII=")},
            Trait { name: string::utf8(b"Pipe"), png: string::utf8(b"iVBORw0KGgoAAAANSUhEUgAAACAAAAAgAgMAAAAOFJJnAAAADFBMVEUAAAAAAAB3RkyUXFnbHKunAAAAAXRSTlMAQObYZgAAACNJREFUGNNjGLxAFMbIdgyAMsKXQBhZ/6AiUiuhalhDGGgCAECZBUzRP8rtAAAAAElFTkSuQmCC")},
            Trait { name: string::utf8(b"Narrow Open Mouth"), png: string::utf8(b"iVBORw0KGgoAAAANSUhEUgAAACAAAAAgAgMAAAAOFJJnAAAADFBMVEUAAAAAAACGIiexHRhTeEvdAAAAAXRSTlMAQObYZgAAABRJREFUGNNjGFpAFMaQhDFkGWgKAB9QAEw967k5AAAAAElFTkSuQmCC")},
            Trait { name: string::utf8(b"Chill Smile"), png: string::utf8(b"iVBORw0KGgoAAAANSUhEUgAAACAAAAAgAQMAAABJtOi3AAAABlBMVEUAAAAAAAClZ7nPAAAAAXRSTlMAQObYZgAAABNJREFUCNdjoCFQEAAS8g8oMgMASzEBMGn9xVEAAAAASUVORK5CYII=")},
            Trait { name: string::utf8(b"Chinstrap"), png: string::utf8(b"iVBORw0KGgoAAAANSUhEUgAAACAAAAAgAgMAAAAOFJJnAAAACVBMVEUAAABUVFQAAACdgFLfAAAAAXRSTlMAQObYZgAAAB1JREFUGNNjGFLAQYuBBcwQYGEIADNYQ0MdGGgIALHXAcIZaItpAAAAAElFTkSuQmCC")}
        ]);

        upload_traits(6, vector<u8>[0], vector[
            Trait { name: string::utf8(b""), png: string::utf8(b"")}
        ]);

        upload_traits(7, vector<u8>[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18], vector[
            Trait { name: string::utf8(b"Blue Sneakers"), png: string::utf8(b"iVBORw0KGgoAAAANSUhEUgAAACAAAAAgAgMAAAAOFJJnAAAADFBMVEUAAAAkUpn///8UPVxkGBcRAAAAAXRSTlMAQObYZgAAAB9JREFUGNNjGLGAF0Rw9TMtUAXzHJgDwMKqDpwBSKoARRECzKMjW7YAAAAASUVORK5CYII=")},
            Trait { name: string::utf8(b"Slippers"), png: string::utf8(b"iVBORw0KGgoAAAANSUhEUgAAACAAAAAgAgMAAAAOFJJnAAAADFBMVEUAAAAAAAD////U1NQrJtYdAAAAAXRSTlMAQObYZgAAAClJREFUGNNjGLGAG0SE8IsyrwbSjC9DqkJBAuyrVr5a5QBksIYCgQMDAIWHCAZ0ivZ6AAAAAElFTkSuQmCC")},
            Trait { name: string::utf8(b"Roller Blades"), png: string::utf8(b"iVBORw0KGgoAAAANSUhEUgAAACAAAAAgBAMAAACBVGfHAAAAElBMVEUAAAAAAADaPDYwY9P///+GIifs5m8RAAAAAXRSTlMAQObYZgAAAEBJREFUKM9jGAXDDBgwMDAzMAoKCkC4jMaGTgzCxoKKjooQAUFBQVVFQUGhIKcgiICQiJAAI0gaBlRVVBWYoNIA02sFvbgiUlcAAAAASUVORK5CYII=")},
            Trait { name: string::utf8(b"None"), png: string::utf8(b"iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAQAAAC1HAwCAAAAC0lEQVR42mNkYAAAAAYAAjCB0C8AAAAASUVORK5CYII=")},
            Trait { name: string::utf8(b"Striped Socks"), png: string::utf8(b"iVBORw0KGgoAAAANSUhEUgAAACAAAAAgBAMAAACBVGfHAAAAD1BMVEUAAACxHRiGIifU1NT///8JCi5WAAAAAXRSTlMAQObYZgAAAC1JREFUKM9jGAXDDBgwMDADKWUYX1FAiYFJEISgwMQBqMIFrh4oIwBUJYjdNABfAQHgRgVXngAAAABJRU5ErkJggg==")},
            Trait { name: string::utf8(b"Green Sneakers"), png: string::utf8(b"iVBORw0KGgoAAAANSUhEUgAAACAAAAAgAgMAAAAOFJJnAAAADFBMVEUAAAAYbUX///8RTS2SZfaAAAAAAXRSTlMAQObYZgAAAB9JREFUGNNjGLGAF0Rw9TMtUAXzHJgDwMKqDpwBSKoARRECzKMjW7YAAAAASUVORK5CYII=")},
            Trait { name: string::utf8(b"Gray Shoes"), png: string::utf8(b"iVBORw0KGgoAAAANSUhEUgAAACAAAAAgBAMAAACBVGfHAAAAD1BMVEUAAAB8fHxUVFQnJycAAAAL5v8lAAAAAXRSTlMAQObYZgAAAC5JREFUKM9jGAXDDBgwMDADkRKMbySgxMCsCEIQ4KwowMBiJIjQwAwUYIAIYAIAbzACN3lvSakAAAAASUVORK5CYII=")},
            Trait { name: string::utf8(b"Yellow Sneakers"), png: string::utf8(b"iVBORw0KGgoAAAANSUhEUgAAACAAAAAgAgMAAAAOFJJnAAAADFBMVEUAAADp4iX////esC/HqtVrAAAAAXRSTlMAQObYZgAAAB9JREFUGNNjGLGAF0Rw9TMtUAXzHJgDwMKqDpwBSKoARRECzKMjW7YAAAAASUVORK5CYII=")},
            Trait { name: string::utf8(b"Snowboard"), png: string::utf8(b"iVBORw0KGgoAAAANSUhEUgAAACAAAAAgAgMAAAAOFJJnAAAACVBMVEUAAAAAAAAAxfCIUzjXAAAAAXRSTlMAQObYZgAAACRJREFUGNNjGMlABEZJhgawhjCGpjCwrXLgamBaNYGBMRQMHABaSgbvYKSrowAAAABJRU5ErkJggg==")},
            Trait { name: string::utf8(b"Ice Skates"), png: string::utf8(b"iVBORw0KGgoAAAANSUhEUgAAACAAAAAgBAMAAACBVGfHAAAAD1BMVEUAAAB8fHwAAAD////aPDa68bjrAAAAAXRSTlMAQObYZgAAAEBJREFUKM9jGAXDDBgwMDADKSUFCJfJxclYQMVFQVhYACKgpKQkKKSkpCAoCBUQFjZkYDQ0FoCbICgoyMAIlQYAw+IEUFxH0moAAAAASUVORK5CYII=")},
            Trait { name: string::utf8(b"White Boots"), png: string::utf8(b"iVBORw0KGgoAAAANSUhEUgAAACAAAAAgAgMAAAAOFJJnAAAADFBMVEUAAAAAAAD////U1NQrJtYdAAAAAXRSTlMAQObYZgAAAChJREFUGNNjGJmggZmBD0TLzWdfYgdmTGBfApapmyAPYYQGiIYwMAAAhjIGcCT0leIAAAAASUVORK5CYII=")},
            Trait { name: string::utf8(b"Frozen"), png: string::utf8(b"iVBORw0KGgoAAAANSUhEUgAAACAAAAAgAgMAAAAOFJJnAAAADFBMVEUAAAAAxfCf3fkAAAAF6gJPAAAAAXRSTlMAQObYZgAAACRJREFUGNNjGJnAgZGBDUSzujIGSIEY1xpMF4BlpBrYFiApBABjtARoNgJwbQAAAABJRU5ErkJggg==")},
            Trait { name: string::utf8(b"Elf"), png: string::utf8(b"iVBORw0KGgoAAAANSUhEUgAAACAAAAAgBAMAAACBVGfHAAAAD1BMVEUAAACxHRiGIicAAAATERAFVo93AAAAAXRSTlMAQObYZgAAADZJREFUKM9jGAXDDAgwMDABKUUIz5hBUUDZgEmQRUkQImBkoCjALMwkCFfPLCgowGAoKIjdNAB7PwJ5dZ0C2wAAAABJRU5ErkJggg==")},
            Trait { name: string::utf8(b"White and Gray Sneakers"), png: string::utf8(b"iVBORw0KGgoAAAANSUhEUgAAACAAAAAgAgMAAAAOFJJnAAAACVBMVEUAAAD///+goKDSb8EQAAAAAXRSTlMAQObYZgAAACNJREFUGNNjGJmggYmBE0RzdTEtUAUxOB2YAsAyog6sAUgKAVcPAyyjM3sZAAAAAElFTkSuQmCC")},
            Trait { name: string::utf8(b"High"), png: string::utf8(b"iVBORw0KGgoAAAANSUhEUgAAACAAAAAgAgMAAAAOFJJnAAAACVBMVEUAAABrTVmLYHAvriRzAAAAAXRSTlMAQObYZgAAACRJREFUGNNjGJnAgZGBDUSzujIGSIEYbA2MC8AyYg2sC5AUAgBLcwNfMjTmaQAAAABJRU5ErkJggg==")},
            Trait { name: string::utf8(b"Dress Shoes"), png: string::utf8(b"iVBORw0KGgoAAAANSUhEUgAAACAAAAAgAgMAAAAOFJJnAAAADFBMVEUAAABrTVmLYHAAAABpcGB9AAAAAXRSTlMAQObYZgAAAClJREFUGNNjGJnAgZFBDESzujIGR4EY1xpMF4No5qiGawvADAaGA0AKAH+CBpRB4MtmAAAAAElFTkSuQmCC")},
            Trait { name: string::utf8(b"Red Sneakers"), png: string::utf8(b"iVBORw0KGgoAAAANSUhEUgAAACAAAAAgAgMAAAAOFJJnAAAADFBMVEUAAACxHRj///+GIifO3OvTAAAAAXRSTlMAQObYZgAAAB9JREFUGNNjGLGAF0RwtTItUAXzHJgDwMKqDpwBSKoAQ9ECwqXLH3QAAAAASUVORK5CYII=")},
            Trait { name: string::utf8(b"Purple Sneakers"), png: string::utf8(b"iVBORw0KGgoAAAANSUhEUgAAACAAAAAgAgMAAAAOFJJnAAAADFBMVEUAAACtKZX///+LK2PExSGQAAAAAXRSTlMAQObYZgAAAB9JREFUGNNjGLGAF0Rw9TMtUAXzHJgDwMKqDpwBSKoARRECzKMjW7YAAAAASUVORK5CYII=")},
            Trait { name: string::utf8(b"Clogs"), png: string::utf8(b"iVBORw0KGgoAAAANSUhEUgAAACAAAAAgBAMAAACBVGfHAAAAElBMVEUAAACUXFl3RkyyjXPfvqcAAADm9aNwAAAAAXRSTlMAQObYZgAAADBJREFUKM9jGAXDDBgwMDABkSCUG6ToIMiqJMzAJAwTEHZgYFU0QWhgAgowQAQwAQCTqwMCqj+T/gAAAABJRU5ErkJggg==")}
        ]);

        upload_traits(8, vector<u8>[0], vector[
            Trait { name: string::utf8(b""), png: string::utf8(b"")}
        ]);

        upload_traits(9, vector<u8>[0,1,2,3,4,5,6,7,8], vector[
            Trait { name: string::utf8(b"Brown"), png: string::utf8(b"iVBORw0KGgoAAAANSUhEUgAAACAAAAAgBAMAAACBVGfHAAAAFVBMVEUAAADfvqeyjXOUXFkAAAB3RkwnJye5rIxEAAAAAXRSTlMAQObYZgAAAOlJREFUKM9d0UtywyAMBuAsuADuY59fNAeQSNcEK9m3uAfoeHz/K0QmjmGihZj5RhIaOFhoarlGDpYcGoxIptQBB1VIBwKAOsjew/sOLhXaDOcrDLGDAYbhFd53OG7QDa3RX7vG0MBV+HyFObSW/7WA26rjl8Evy/TsEPz4DwLFHXjwEJJz2oDYVmMi2YGO/g0m0xPAHsS8D8nMA4tJTBucrZ+pUJgeMn6DBVIkcnzAKYOEZg4FqbacRqDwIkE51Io4AbNcS9w+cYkT41ZuywZXiX9jLGKn8ytkjqpKlDld6js6VcuqTi0d7qKuM66LilVzAAAAAElFTkSuQmCC")},
            Trait { name: string::utf8(b"Black"), png: string::utf8(b"iVBORw0KGgoAAAANSUhEUgAAACAAAAAgBAMAAACBVGfHAAAAD1BMVEUAAAAAAAB8fHxUVFQzMzP62w08AAAAAXRSTlMAQObYZgAAANBJREFUKM9d0dGtwzAIBdBmA9+YBYLfAi4sgGD/mR5x3dgqHyQ68sVIfmWhrD6q9myHLCApqbqBd0BigxAR3aAyC/MG54A14+ABzTZokth/4XrgPWEbOmq/9q624Bhw/QL1FTnvA75WpZ5QPfBNhJx8qag94I0lNKxMUM/VXDUe0Df/SQq+IM6i7s+Q6t48UqxMsMy7knZ8hEw8JCjMbS5WRUPJO0kZkfwRckSH908ECQGy+YgwuICACQgDGUV+D76hugFQrV5OLiOC7MCBbK9/btEuQ7KP2ysAAAAASUVORK5CYII=")},
            Trait { name: string::utf8(b"Skeleton"), png: string::utf8(b"iVBORw0KGgoAAAANSUhEUgAAACAAAAAgBAMAAACBVGfHAAAAFVBMVEUAAADU1NQAAABUVFSzs7N8fHwmJibTOhb/AAAAAXRSTlMAQObYZgAAAOtJREFUKM91z01uxCAMBWDEDWxD1+Bkujck3adDZ0+iOUC7yP2PUPJTiCrNAyHx6SFhVcKunkf6z3Lo1OCWXNGvCyyBOT4vIFAyNuhgC70GDUfwP8wV8n63rWF3yBWUz1sBXAMpQKaBpgLyuMAUYzQ/qqUvjUdQrfGRUvp+8uXr67oKtHE9WcgEMFfId4mT5DqeH0DKHm0FKQ2RCOGEnowMZJaMfyCxLDMCuvPJAiIgweIptzcyKRq2weMJgyyTsHXa75UO+0j3DdQBjHNK7+J8OED7OXXIwB4P8IDMDOTJadynZ97esWalnfoFyskoXjMg55wAAAAASUVORK5CYII=")},
            Trait { name: string::utf8(b"White"), png: string::utf8(b"iVBORw0KGgoAAAANSUhEUgAAACAAAAAgBAMAAACBVGfHAAAAFVBMVEUAAADU1NQAAAD///+zs7OgoKB8fHy2ACS8AAAAAXRSTlMAQObYZgAAAN1JREFUKM910dGNwyAMBuCIDWyn9xxMO4CxOgAcC1SXBbr/EmfTlKBKtSIn+hT/WGKx4u3svSJaC3DC1b/jOkFBZmgTNGhlnSACNHs+4cwI0AHqBKsDfocyYIT2mjf1mjYNHX4+4ZkHpKf/8HuGxLvBH0EdE/qAi6jgAFJVkHFOEAcSgQGiKi71DUomRCMkESmBCW4HrDZPUiTXl8SLEigUQMJjsaQC8qBcdOsj96haaIfMlB0iVrVl7XqW5BB2rKS3ctsPuAK2iAXsHdQhETKzSKIt9dDAbJ05sLXlH99sKB2+O3PtAAAAAElFTkSuQmCC")},
            Trait { name: string::utf8(b"Zombie"), png: string::utf8(b"iVBORw0KGgoAAAANSUhEUgAAACAAAAAgBAMAAACBVGfHAAAAHlBMVEUAAADd4c4TFQ3CyaeVomhsdkk7QCjNQGHybX0AAADJ4bO/AAAAAXRSTlMAQObYZgAAAQVJREFUKM9d0cFOwzAMBuAqbxAKnLOkG+fFpg8Qu0McacMQR0TKAyAh7Q125ZGXpl1SzQdH+eTfipQqllalpzI2NgEFGlBRcQVktR5eqwIM7emP/8sOKWE8f5aJTQR59HmHkBPI2q2ghoj2Fu4y7DPkpalWT0/3uoBI8HgLwZbI1zRAnEea5wgDcX9NMLzJBwR0GaiWwMidWgApPo0+AmfAvbznc8D+CkASD6fvvMQQ1dT9DOTUAh0i09GjXTLNAYih8+xe1AytAWQMZPvfOdI2AJ5GtupJpQnXAwTeeleZCcToeoKd341u/tUtu/fGeY6nkBMYclprRENqI1NE69i1Fjq26gLc1jdBSLXPzQAAAABJRU5ErkJggg==")},
            Trait { name: string::utf8(b"Golden"), png: string::utf8(b"iVBORw0KGgoAAAANSUhEUgAAACAAAAAgBAMAAACBVGfHAAAAGFBMVEUAAAD/9cz/1zgAAADvtBazfBz///9/Vx4OPYF3AAAAAXRSTlMAQObYZgAAAPJJREFUKM9d0cFOwzAMBuBJeYIUEOf9Meya1Z12dwycoYEH2KB3pPb9l2VtE80HR/pkx1ayScG+5BytS8mgQAeflCoQxwytQAFQBa21sLaCfQZawdgMTaigQUJ3Dw8rbBcol+aox16jKWAyPN/D6ErL/7VAyqrdS4Iv0fPSofi0T4TXYQVpLJT0z89AklYTIl2BtvYRSfoFIBYkQmEZK9KIJgl+hjciFYrk+pt0HxDFb9Qg5xvsWtD7MIr7GXxu2XVAPE3q+ORyReiBUQ8xzJ84hV5wjMdphoOG7y5ETaexLq8RmJmoFb/P72iYU2Y2nNLmAqlBNWjrQUErAAAAAElFTkSuQmCC")},
            Trait { name: string::utf8(b"Gray"), png: string::utf8(b"iVBORw0KGgoAAAANSUhEUgAAACAAAAAgBAMAAACBVGfHAAAAFVBMVEUAAADU1NSzs7N8fHwAAABUVFQzMzN30vgtAAAAAXRSTlMAQObYZgAAAOlJREFUKM9d0UtywyAMBuAsuADuY59fNAeQSNcEK9m3uAfoeHz/K0QmjmGihZj5RhIaOFhoarlGDpYcGoxIptQBB1VIBwKAOsjew/sOLhXaDOcrDLGDAYbhFd53OG7QDa3RX7vG0MBV+HyFObSW/7WA26rjl8Evy/TsEPz4DwLFHXjwEJJz2oDYVmMi2YGO/g0m0xPAHsS8D8nMA4tJTBucrZ+pUJgeMn6DBVIkcnzAKYOEZg4FqbacRqDwIkE51Io4AbNcS9w+cYkT41ZuywZXiX9jLGKn8ytkjqpKlDld6js6VcuqTi0d7qKuM66LilVzAAAAAElFTkSuQmCC")},
            Trait { name: string::utf8(b"Cyborg"), png: string::utf8(b"iVBORw0KGgoAAAANSUhEUgAAACAAAAAgBAMAAACBVGfHAAAAHlBMVEUAAAAAAADU1NSzs7N8fHwmJiZUVFTaExM+Pte2FSj4QyJcAAAAAXRSTlMAQObYZgAAASVJREFUKM9dj7FugzAQhskb+EIodCyoVVYwaWeE5c7GQLLSUHdGaVplLFNXxr5tfTYmVf/hbH/6dOfzvBUA8XQAAA8NWDngcWKFZwPwpJUwRdEqB38AOEXCcwkEpTRtyAL8OKZxzK5gbUC+gFVsQFL8AQnVMP0P7haQOXBtakLcP8E37wTsNtF2FAbcr7+3KK3GGdTV+OVhIn1FgVUoGEVyDfq8QsEoMn+JH0p6EO4fkpo0PXHAjm25A0eaZDShfd/NQKksy7hS3O3rP0pWHtEgM+B1U8tSG8KSDW/3bc3qvpN2cvgRnM/7z5YXO0kM4EHT1O+tuoWdsD0mpWQ5NSEJhBn7OvBCdYO6ED9FIX+ebrDkb/CDxobxAbAwCC/YFHRMAaIvv1CnSEBkTjEbAAAAAElFTkSuQmCC")},
            Trait { name: string::utf8(b"Demon"), png: string::utf8(b"iVBORw0KGgoAAAANSUhEUgAAACAAAAAgBAMAAACBVGfHAAAAGFBMVEUAAAD/YEUAAADqJhfJABiKGTRgFzb/o6OFcHZiAAAAAXRSTlMAQObYZgAAAQtJREFUKM9dz8FOwzAMBuAqb5AVOGdpOs6NzR4gduFMFuAMankAJLTXn5NMzTSrl3z1HztdLmuNfN1WSvtOTbsGe5S/bmot7vPH2t/UYFwAANcGg9agNTfYF0DThhToww30IOjvYbfBtEG7NFe+1FzH5urloGqXKvB0D4uXcH3Q8J0bSFYdoIB7ETgRR9VDziiGd/2IgEGdIBagXgMjz2acTQYkWY0Q2SiqgJN+AJHYOV8ASAMSYehcKGOJemKRDWbJEyb0lgq4VyAGThzSdbHjAMi4kJeGEjk6gEQr+2gKuBABFh5TqGe7hkj+kA5rDaiUwocbZx7nCs//b9Hac/o7f9WEstZKLlc+XgDimToFb45F8wAAAABJRU5ErkJggg==")}
        ]);

        upload_traits(10, vector<u8>[0], vector[
            Trait { name: string::utf8(b"Alpha"), png: string::utf8(b"iVBORw0KGgoAAAANSUhEUgAAACAAAAAgBAMAAACBVGfHAAAAElBMVEUAAADp4iWxHRjesC/aPDaGIiey0+b9AAAAAXRSTlMAQObYZgAAADVJREFUKM9jAAFmAUMBQwYkIOSo5KgigOAzB4kqqQg5IqkwVQxSDAKqQCgxNhYUZBgFwwwAACa2BCnRkiorAAAAAElFTkSuQmCC")}
        ]);

        upload_traits(11, vector<u8>[0], vector[
            Trait { name: string::utf8(b""), png: string::utf8(b"")}
        ]);

        upload_traits(12, vector<u8>[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26], vector[
            Trait { name: string::utf8(b"Rightward Gaze"), png: string::utf8(b"iVBORw0KGgoAAAANSUhEUgAAACAAAAAgAgMAAAAOFJJnAAAACVBMVEUAAAAAAAD///+D3c/SAAAAAXRSTlMAQObYZgAAABZJREFUGNNjoBiEsDpAGEu5AhiGHQAAWNkBmUCD1MMAAAAASUVORK5CYII=")},
            Trait { name: string::utf8(b"Calm"), png: string::utf8(b"iVBORw0KGgoAAAANSUhEUgAAACAAAAAgAgMAAAAOFJJnAAAACVBMVEUAAAAAAAD///+D3c/SAAAAAXRSTlMAQObYZgAAABlJREFUGNNjIBc4sEAZIawOEEYEawPDsAMAeYwBu2eqK7sAAAAASUVORK5CYII=")},
            Trait { name: string::utf8(b"Non"), png: string::utf8(b"iVBORw0KGgoAAAANSUhEUgAAACAAAAAgAgMAAAAOFJJnAAAACVBMVEUAAAAAAAD///+D3c/SAAAAAXRSTlMAQObYZgAAABlJREFUGNNjIBsIQCjGENEACCuStYFh2AEAZ9gBqbVtzwEAAAAASUVORK5CYII=")},
            Trait { name: string::utf8(b"Pouncing"), png: string::utf8(b"iVBORw0KGgoAAAANSUhEUgAAACAAAAAgAgMAAAAOFJJnAAAACVBMVEUAAAAAAADp4iUCHEfGAAAAAXRSTlMAQObYZgAAABRJREFUGNNjoBg4MEIZU8QYhh8AAMbZAOyq9yoHAAAAAElFTkSuQmCC")},
            Trait { name: string::utf8(b"3D Glasses"), png: string::utf8(b"iVBORw0KGgoAAAANSUhEUgAAACAAAAAgBAMAAACBVGfHAAAAFVBMVEUAAABDP2RQWZYwY9PaPDYkUpmxHRgkvYJJAAAAAXRSTlMAQObYZgAAACpJREFUKM9joBsQUhIUFFRSEoQLMIYGMqYlMjAIwAWMDRldHLEKjIIBAgCzEQQyLJg4UgAAAABJRU5ErkJggg==")},
            Trait { name: string::utf8(b"Sus"), png: string::utf8(b"iVBORw0KGgoAAAANSUhEUgAAACAAAAAgAgMAAAAOFJJnAAAACVBMVEUAAAAAAAD///+D3c/SAAAAAXRSTlMAQObYZgAAABlJREFUGNNjIBcEsEIZLAwOEEYm2wSGYQcAW1oBmREaM9oAAAAASUVORK5CYII=")},
            Trait { name: string::utf8(b"Downward Gaze"), png: string::utf8(b"iVBORw0KGgoAAAANSUhEUgAAACAAAAAgAgMAAAAOFJJnAAAACVBMVEUAAAAAAAD///+D3c/SAAAAAXRSTlMAQObYZgAAABxJREFUGNNjIBeEsDqAacaVUhMgIjM4GxiGHQAAn9MDD9NbETgAAAAASUVORK5CYII=")},
            Trait { name: string::utf8(b"Full Moon"), png: string::utf8(b"iVBORw0KGgoAAAANSUhEUgAAACAAAAAgAgMAAAAOFJJnAAAACVBMVEUAAAAAAADp4iUCHEfGAAAAAXRSTlMAQObYZgAAABZJREFUGNNjIBeEsgZAGFGsCxiGLwAAdc0Bqi7falEAAAAASUVORK5CYII=")},
            Trait { name: string::utf8(b"Wide Dots"), png: string::utf8(b"iVBORw0KGgoAAAANSUhEUgAAACAAAAAgAQMAAABJtOi3AAAABlBMVEUAAAAAAAClZ7nPAAAAAXRSTlMAQObYZgAAABBJREFUCNdjIAY4NDAMFAAAXGAAwbIThh4AAAAASUVORK5CYII=")},
            Trait { name: string::utf8(b"Hipster Glasses"), png: string::utf8(b"iVBORw0KGgoAAAANSUhEUgAAACAAAAAgBAMAAACBVGfHAAAAD1BMVEUAAACGIiexHRjF5O0AAADncVZCAAAAAXRSTlMAQObYZgAAAC5JREFUKM9joBtQUhQUFFJSEoQLMBobKhobMjAIwAVcDIEIWUBQEIhAAqNggAAA/9cDGdCkuJEAAAAASUVORK5CYII=")},
            Trait { name: string::utf8(b"Deep Blue"), png: string::utf8(b"iVBORw0KGgoAAAANSUhEUgAAACAAAAAgBAMAAACBVGfHAAAAD1BMVEUAAAAAAAD///8wY9NRzuok7Q52AAAAAXRSTlMAQObYZgAAACZJREFUKM9joB9gFGAQRBEQVmRUFkAWUDFkNFFAFhAUAKFRMHAAAFMpAXckuR9KAAAAAElFTkSuQmCC")},
            Trait { name: string::utf8(b"Mascara"), png: string::utf8(b"iVBORw0KGgoAAAANSUhEUgAAACAAAAAgBAMAAACBVGfHAAAAD1BMVEUAAAAAAAD////31GjesC/wTwMfAAAAAXRSTlMAQObYZgAAACdJREFUKM9jGDjAyMjIICAggCQgKMggKIgkwGQowuAorMAwCgYMAADySAFEqKSTQQAAAABJRU5ErkJggg==")},
            Trait { name: string::utf8(b"Curious"), png: string::utf8(b"iVBORw0KGgoAAAANSUhEUgAAACAAAAAgAgMAAAAOFJJnAAAACVBMVEUAAAAAAAD///+D3c/SAAAAAXRSTlMAQObYZgAAABZJREFUGNNjIBeEiEJoxiliDgjGsAMA7gACQHP1B3QAAAAASUVORK5CYII=")},
            Trait { name: string::utf8(b"Flashy Sunnies"), png: string::utf8(b"iVBORw0KGgoAAAANSUhEUgAAACAAAAAgAgMAAAAOFJJnAAAADFBMVEUAAAAAAADaPDbWXjMlMaJrAAAAAXRSTlMAQObYZgAAACRJREFUGNNjIBOwhoaGBoAYjD/lJ7CAGSulIAyGEFYHFoZhAgA+eAT3cXb5TAAAAABJRU5ErkJggg==")},
            Trait { name: string::utf8(b"The Intellectual"), png: string::utf8(b"iVBORw0KGgoAAAANSUhEUgAAACAAAAAgAgMAAAAOFJJnAAAADFBMVEUAAAAAAAD///8AxvILX77fAAAAAXRSTlMAQObYZgAAACNJREFUGNNjIBOwhjCGBoBZleETWMCMXLYLEIYIowMLwzABAG3FBAShPbp8AAAAAElFTkSuQmCC")},
            Trait { name: string::utf8(b"Unibrow"), png: string::utf8(b"iVBORw0KGgoAAAANSUhEUgAAACAAAAAgAQMAAABJtOi3AAAABlBMVEUAAAAAAAClZ7nPAAAAAXRSTlMAQObYZgAAABJJREFUCNdjIAb8bwASjgwDAQDWGwHBdn5dmwAAAABJRU5ErkJggg==")},
            Trait { name: string::utf8(b"Expressionless"), png: string::utf8(b"iVBORw0KGgoAAAANSUhEUgAAACAAAAAgAQMAAABJtOi3AAAABlBMVEUAAAAAAAClZ7nPAAAAAXRSTlMAQObYZgAAABBJREFUCNdjIBo8bmAYAAAAo8IBZAeCbMMAAAAASUVORK5CYII=")},
            Trait { name: string::utf8(b"Crossed"), png: string::utf8(b"iVBORw0KGgoAAAANSUhEUgAAACAAAAAgAgMAAAAOFJJnAAAACVBMVEUAAAAAAAD///+D3c/SAAAAAXRSTlMAQObYZgAAABVJREFUGNNjoBiEijpAGJwSDMMPAACvVADMF486XAAAAABJRU5ErkJggg==")},
            Trait { name: string::utf8(b"Leftward Gaze"), png: string::utf8(b"iVBORw0KGgoAAAANSUhEUgAAACAAAAAgAgMAAAAOFJJnAAAACVBMVEUAAAAAAAD///+D3c/SAAAAAXRSTlMAQObYZgAAABVJREFUGNNjIBeIsEIZkWIODMMXAACu1gDJQdqGPQAAAABJRU5ErkJggg==")},
            Trait { name: string::utf8(b"Triangle"), png: string::utf8(b"iVBORw0KGgoAAAANSUhEUgAAACAAAAAgBAMAAACBVGfHAAAAD1BMVEUAAAAAAAD////esC/p4iXz4cM1AAAAAXRSTlMAQObYZgAAACBJREFUKM9joB9gFGAQRBEQFgAiZAUqAgwiigyjYBABAFRUANOQf3MAAAAAAElFTkSuQmCC")},
            Trait { name: string::utf8(b"Simple"), png: string::utf8(b"iVBORw0KGgoAAAANSUhEUgAAACAAAAAgAgMAAAAOFJJnAAAACVBMVEUAAAAAAAD///+D3c/SAAAAAXRSTlMAQObYZgAAABJJREFUGNNjoBhEsDYgGMMOAAB2rAG7OrJocQAAAABJRU5ErkJggg==")},
            Trait { name: string::utf8(b"Lovable"), png: string::utf8(b"iVBORw0KGgoAAAANSUhEUgAAACAAAAAgAQMAAABJtOi3AAAABlBMVEUAAAAAAAClZ7nPAAAAAXRSTlMAQObYZgAAAA9JREFUCNdjIACUUAj6AwAxogBn9QqdoAAAAABJRU5ErkJggg==")},
            Trait { name: string::utf8(b"Closed"), png: string::utf8(b"iVBORw0KGgoAAAANSUhEUgAAACAAAAAgAQMAAABJtOi3AAAABlBMVEUAAAAAAAClZ7nPAAAAAXRSTlMAQObYZgAAABNJREFUCNdjIAZMaQAS34EE/QEAMSUCjGzFT/EAAAAASUVORK5CYII=")},
            Trait { name: string::utf8(b"Challenged"), png: string::utf8(b"iVBORw0KGgoAAAANSUhEUgAAACAAAAAgAgMAAAAOFJJnAAAACVBMVEUAAAAAAAD///+D3c/SAAAAAXRSTlMAQObYZgAAABhJREFUGNNjIBcEMDpAGKKiUBExMYbhBwDMUwDo9EJHjwAAAABJRU5ErkJggg==")},
            Trait { name: string::utf8(b"Narrow Dots"), png: string::utf8(b"iVBORw0KGgoAAAANSUhEUgAAACAAAAAgAQMAAABJtOi3AAAABlBMVEUAAAAAAAClZ7nPAAAAAXRSTlMAQObYZgAAAA9JREFUCNdjIBqIMAwEAAAJ2AAVPM/xJQAAAABJRU5ErkJggg==")},
            Trait { name: string::utf8(b"Standard Sunnies"), png: string::utf8(b"iVBORw0KGgoAAAANSUhEUgAAACAAAAAgAgMAAAAOFJJnAAAACVBMVEUAAAAAAAB8fHwEsXMZAAAAAXRSTlMAQObYZgAAACRJREFUGNNjIBOwhoaGBoAYjKliASxgxlRJCIMhhNWBhWGYAAA5FAPF0zfHvQAAAABJRU5ErkJggg==")},
            Trait { name: string::utf8(b"Restless"), png: string::utf8(b"iVBORw0KGgoAAAANSUhEUgAAACAAAAAgAgMAAAAOFJJnAAAACVBMVEUAAAD///8AAABzxoNxAAAAAXRSTlMAQObYZgAAABhJREFUGNNjIBeIMDpAGJlsE+AMhNRwAQA/rAKpjHjtFQAAAABJRU5ErkJggg==")}
        ]);

        upload_traits(13, vector<u8>[0], vector[
            Trait { name: string::utf8(b""), png: string::utf8(b"")}
        ]);

        upload_traits(14, vector<u8>[0,1,2,3,4,5,6,7,8,9,10,11,12], vector[
            Trait { name: string::utf8(b"Mischievous"), png: string::utf8(b"iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAACXBIWXMAAAsTAAALEwEAmpwYAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAABASURBVHgB7dE7DgAgCATR9f6HXls/FWI0mnk1hEmQAACXlcCs5zVH9tMBQ4TSx1e5SbD6qKMBWw4/+QIAAPCXCsbCCQB95XMPAAAAAElFTkSuQmCC")},
            Trait { name: string::utf8(b"Wide Smile"), png: string::utf8(b"iVBORw0KGgoAAAANSUhEUgAAACAAAAAgAgMAAAAOFJJnAAAACVBMVEUAAAAAAAB9fX1rbxj5AAAAAXRSTlMAQObYZgAAACFJREFUGNNjoCVgWwJlsIZAGY4BARCGg4MDhCEayjCYAQAb0AMPL3oWpgAAAABJRU5ErkJggg==")},
            Trait { name: string::utf8(b"Neutral"), png: string::utf8(b"iVBORw0KGgoAAAANSUhEUgAAACAAAAAgAQMAAABJtOi3AAAABlBMVEUAAAAAAAClZ7nPAAAAAXRSTlMAQObYZgAAABVJREFUCNdjIBfYgQgZEMEBYdEGAAAw0gB/IiGr2QAAAABJRU5ErkJggg==")},
            Trait { name: string::utf8(b"Flared Nostrils"), png: string::utf8(b"iVBORw0KGgoAAAANSUhEUgAAACAAAAAgAgMAAAAOFJJnAAAACVBMVEUAAAAAAAB8fHwEsXMZAAAAAXRSTlMAQObYZgAAABxJREFUGNNjoAtgDIAy2FLQRRgc0EVYWBgGDwAAFIEBpqhDJG4AAAAASUVORK5CYII=")},
            Trait { name: string::utf8(b"Brown Nose Smirk"), png: string::utf8(b"iVBORw0KGgoAAAANSUhEUgAAACAAAAAgAgMAAAAOFJJnAAAADFBMVEUAAAAAAACGREumXFiyLQuqAAAAAXRSTlMAQObYZgAAABtJREFUGNNjoAvg/wBlcC2AMoQaoQzWEIbBDADFWQKWe1o0aQAAAABJRU5ErkJggg==")},
            Trait { name: string::utf8(b"Gray Nose Smirk"), png: string::utf8(b"iVBORw0KGgoAAAANSUhEUgAAACAAAAAgAgMAAAAOFJJnAAAADFBMVEUAAABUVFQAAAB8fHybc42tAAAAAXRSTlMAQObYZgAAAB9JREFUGNNjoAtg/wJlsIZAGYwBDVBWE5RmWsEwCAEALuUDUsAgC00AAAAASUVORK5CYII=")},
            Trait { name: string::utf8(b"Frown"), png: string::utf8(b"iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAACXBIWXMAAAsTAAALEwEAmpwYAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAA8SURBVHgB7dAxCgAwCENRvf+h06VbhxIVXP7bBIOSCADAsjR29Ubl5Cek7iOKRaPH3QrVyLbpMwMAAJQcVNII/nWG3ZYAAAAASUVORK5CYII=")},
            Trait { name: string::utf8(b"Relaxed"), png: string::utf8(b"iVBORw0KGgoAAAANSUhEUgAAACAAAAAgAgMAAAAOFJJnAAAADFBMVEUAAABUVFQAAAB8fHybc42tAAAAAXRSTlMAQObYZgAAAB5JREFUGNNjoAuQ/wtliKVCGawhMLkGKM20gGEQAgAKnwMTkr3sIAAAAABJRU5ErkJggg==")},
            Trait { name: string::utf8(b"Tongue Out"), png: string::utf8(b"iVBORw0KGgoAAAANSUhEUgAAACAAAAAgBAMAAACBVGfHAAAAD1BMVEUAAAAAAACLK2PaPDZ8fHwwqgYNAAAAAXRSTlMAQObYZgAAADNJREFUKM9jGGJAxEUAhS8gKCgggCLAKMiAKgCGSIBRSEkQ1VBhZQFUAWZldHsVGEYmAABo/wHvITi3ZQAAAABJRU5ErkJggg==")},
            Trait { name: string::utf8(b"Narrow Smile"), png: string::utf8(b"iVBORw0KGgoAAAANSUhEUgAAACAAAAAgAQMAAABJtOi3AAAABlBMVEUAAAAAAAClZ7nPAAAAAXRSTlMAQObYZgAAABVJREFUCNdjIBfYwQkZEOEJ4VIdAABorAEgjL+rgAAAAABJRU5ErkJggg==")},
            Trait { name: string::utf8(b"Howling"), png: string::utf8(b"iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAACXBIWXMAAAsTAAALEwEAmpwYAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAA3SURBVHgB7dCxDQAwCANBk/13dgZIhQKi4K82ErYEABgWiaw/bstY7yN7OBran0x47/YAAKDTBWMEBgBVGLRtAAAAAElFTkSuQmCC")},
            Trait { name: string::utf8(b"Smoking"), png: string::utf8(b"iVBORw0KGgoAAAANSUhEUgAAACAAAAAgBAMAAACBVGfHAAAAD1BMVEUAAAAAAACzs7N3RkzaPDZbArQ5AAAAAXRSTlMAQObYZgAAACtJREFUKM9jGLyAiaAAgwIDg6CgAIoSTAFGQTQtDALIAizGxoaCDKMAOwAAzGwBezfyYbcAAAAASUVORK5CYII=")},
            Trait { name: string::utf8(b"Red Nose Smirk"), png: string::utf8(b"iVBORw0KGgoAAAANSUhEUgAAACAAAAAgAgMAAAAOFJJnAAAADFBMVEUAAACGIicAAACUXFlvTMdOAAAAAXRSTlMAQObYZgAAAB5JREFUGNNjoAtg/wJlsIZAGYwBMLkmKM21gmEQAgDghgLa1TaQZAAAAABJRU5ErkJggg==")}
        ]);

        upload_traits(15, vector<u8>[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14], vector[
            Trait { name: string::utf8(b"Clock"), png: string::utf8(b"iVBORw0KGgoAAAANSUhEUgAAACAAAAAgBAMAAACBVGfHAAAAFVBMVEUAAAAAAAD///8mJibU1NQAxfCf3fniSfVsAAAAAXRSTlMAQObYZgAAAERJREFUKM9jGAWs6AJs6KKsUFEESADiADgPyklAMQTD4GDjBFQBExMDFD6jk5EjqoCSsSKaCiVUFQwiKgKoAoyCVA0cAGd+BTKRuF0RAAAAAElFTkSuQmCC")},
            Trait { name: string::utf8(b"Silver"), png: string::utf8(b"iVBORw0KGgoAAAANSUhEUgAAACAAAAAgAgMAAAAOFJJnAAAACVBMVEUAAAD////U1NSdrAhLAAAAAXRSTlMAQObYZgAAACtJREFUGNNjGESAA0I5MLBAGA1YRCQgjAQGBQhDgGEChKHC5ABhcM6kppsAl3oD2R6TEoEAAAAASUVORK5CYII=")},
            Trait { name: string::utf8(b"Sunglasses"), png: string::utf8(b"iVBORw0KGgoAAAANSUhEUgAAACAAAAAgBAMAAACBVGfHAAAAFVBMVEUAAACGIiexHRgkUpkUPVzesC+ygyyPHH7yAAAAAXRSTlMAQObYZgAAAEtJREFUKM9jGKGADYmJLsAKIUlRwZAIxIwJSAKBIIEAJAFRkA4BJAEwG6+AEggoIAmIGAsImyCrAPKAYsgqHBkYXZAFGIEcQfLDCQDEhgTz1mA1JwAAAABJRU5ErkJggg==")},
            Trait { name: string::utf8(b"Bowtie"), png: string::utf8(b"iVBORw0KGgoAAAANSUhEUgAAACAAAAAgAgMAAAAOFJJnAAAADFBMVEUAAADPFxGdHCL8OTPmGSr0AAAAAXRSTlMAQObYZgAAACNJREFUGNNjGArAhvkAhHHrVwGEEbYyAMKIioIyRFkdGGgAAIFjBfERQcIxAAAAAElFTkSuQmCC")},
            Trait { name: string::utf8(b"Dress Tie"), png: string::utf8(b"iVBORw0KGgoAAAANSUhEUgAAACAAAAAgAgMAAAAOFJJnAAAADFBMVEUAAADaPDaxHRiGIieWWlKBAAAAAXRSTlMAQObYZgAAAB1JREFUGNNjGMTAgOEAhMEbDhVh/gOTS6AaAz8AAAFFBbQwGANWAAAAAElFTkSuQmCC")},
            Trait { name: string::utf8(b"Teeth"), png: string::utf8(b"iVBORw0KGgoAAAANSUhEUgAAACAAAAAgAgMAAAAOFJJnAAAACVBMVEUAAAAAAAD///+D3c/SAAAAAXRSTlMAQObYZgAAACdJREFUGNNjGESADUwyOTCwQPgO+EQEwAwgFQFhtIY2QBgcHdR0EwB3ZAPDpQXUNQAAAABJRU5ErkJggg==")},
            Trait { name: string::utf8(b"Pearls"), png: string::utf8(b"iVBORw0KGgoAAAANSUhEUgAAACAAAAAgAgMAAAAOFJJnAAAADFBMVEUAAAAwY9MAxfAkUplGHsLCAAAAAXRSTlMAQObYZgAAADJJREFUGNNjGHjACCaZGBjYINwDDLwQEQcGCZiICUTpBIYECKOS7QKEwZ4LMwYoQAMAAH48BapPurmuAAAAAElFTkSuQmCC")},
            Trait { name: string::utf8(b"Mask"), png: string::utf8(b"iVBORw0KGgoAAAANSUhEUgAAACAAAAAgBAMAAACBVGfHAAAAD1BMVEUAAAAAz+z///8AxvJeicGHiYOQAAAAAXRSTlMAQObYZgAAACtJREFUKM9jGAWYQAGImSgUMHRgYDFAFmA0cXEWQLFGWNAQ1V5GYwGGQQYA7Y8Ck6qdnCcAAAAASUVORK5CYII=")},
            Trait { name: string::utf8(b"Diamond"), png: string::utf8(b"iVBORw0KGgoAAAANSUhEUgAAACAAAAAgBAMAAACBVGfHAAAAGFBMVEUAAABDP2RRzuoAxfBsiL7///+f3fm96eYt/Nz0AAAAAXRSTlMAQObYZgAAADlJREFUKM9jGAWYQACIGUkQgHIEUA0BiaEqEUCzRxCNz6SqgCqgWlyGKuBkqoIqwJzmgGaIM1WDAgCs1ANUMV5SlAAAAABJRU5ErkJggg==")},
            Trait { name: string::utf8(b"Gold"), png: string::utf8(b"iVBORw0KGgoAAAANSUhEUgAAACAAAAAgBAMAAACBVGfHAAAAD1BMVEUAAACygyz31GjesC/p4iXl/SAkAAAAAXRSTlMAQObYZgAAADZJREFUKM9jGAUQIIDEdoASCEl0FQpgAk0FM7IKQyBmRLaACYiFkAUYHRgYDVDcICwkwjDIAACrXQIFuHNyTwAAAABJRU5ErkJggg==")},
            Trait { name: string::utf8(b"Flowers"), png: string::utf8(b"iVBORw0KGgoAAAANSUhEUgAAACAAAAAgBAMAAACBVGfHAAAAFVBMVEUAAAB+QJQAUZ30XizPFxHs4wAAsCrBqxd6AAAAAXRSTlMAQObYZgAAAFFJREFUKM9jGCFAAc4KAJNMSnABUzDJCFfBbAymBAXgKkzApCPCNBcHIMHighBgEQBpdEAIMAoyMLAaGyC5QFCBLTQYyoY6IS0VzZFsDIMNAACDCQVI4lQm7gAAAABJRU5ErkJggg==")},
            Trait { name: string::utf8(b"Secret Society"), png: string::utf8(b"iVBORw0KGgoAAAANSUhEUgAAACAAAAAgBAMAAACBVGfHAAAAG1BMVEUAAAAmJiZ8fHwAAACGIiexHRizs7NUVFT///9CtDXHAAAAAXRSTlMAQObYZgAAAEJJREFUKM9jGAUsYNIBIcAKJgNwqIBLsiIb4gDFCEMMBU1RrGEWKhJGEWDUUFNEFShKKkQVUFNTxG8Gg6GgAQMtAQAPUQX5XIuKQgAAAABJRU5ErkJggg==")},
            Trait { name: string::utf8(b"Bandana"), png: string::utf8(b"iVBORw0KGgoAAAANSUhEUgAAACAAAAAgAgMAAAAOFJJnAAAADFBMVEUAAACxHRjaPDaGIic8TUzRAAAAAXRSTlMAQObYZgAAADZJREFUGNNjGHjADCP5wQzGAwzmEMYGhusQxtKwGIjSrKgCCENq5QEIg2051BTGGJh5BdR0HACoFggfrfG60wAAAABJRU5ErkJggg==")},
            Trait { name: string::utf8(b"None"), png: string::utf8(b"iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAQAAAC1HAwCAAAAC0lEQVR42mNkYAAAAAYAAjCB0C8AAAAASUVORK5CYII=")},
            Trait { name: string::utf8(b"Sheep Heart"), png: string::utf8(b"iVBORw0KGgoAAAANSUhEUgAAACAAAAAgBAMAAACBVGfHAAAAElBMVEUAAACxHRjesC/aPDb31GjWXjOwiADrAAAAAXRSTlMAQObYZgAAADBJREFUKM9jGAVEACYgVkAWYAFiB/wqQAgFKDMqoAoYigqgCQiiCTALorvEgIG+AAA21QHBYNpakgAAAABJRU5ErkJggg==")}
        ]);

        upload_traits(16, vector<u8>[0], vector[
            Trait { name: string::utf8(b""), png: string::utf8(b"")}
        ]);

        upload_traits(17, vector<u8>[0,1,2,3], vector[
            Trait { name: string::utf8(b""), png: string::utf8(b"")},
            Trait { name: string::utf8(b""), png: string::utf8(b"")},
            Trait { name: string::utf8(b""), png: string::utf8(b"")},
            Trait { name: string::utf8(b""), png: string::utf8(b"")}
        ]);
    }

    public(friend) fun update_token_traits(
        token_id: TokenId,
        is_sheep: bool,
        fur: u8,
        head: u8,
        ears: u8,
        eyes: u8,
        nose: u8,
        mouth: u8,
        neck: u8,
        feet: u8,
        alpha_index: u8
    ) acquires Data {
        let data = borrow_global_mut<Data>(@woolf_deployer);
        table::upsert(&mut data.token_traits, token_id, SheepWolf {
            is_sheep, fur, head, ears, eyes, nose, mouth, neck, feet, alpha_index,
        });
    }

    public entry fun upload_traits(
        trait_type: u8,
        trait_ids: vector<u8>,
        traits: vector<Trait>
    ) acquires Data {
        assert!(vector::length(&trait_ids) == vector::length(&traits), error::invalid_argument(EMISMATCHED_INPUT));
        let data = borrow_global_mut<Data>(@woolf_deployer);
        let i = 0;
        while (i < vector::length(&traits)) {
            if (!table::contains(&data.trait_data, trait_type)) {
                table::add(&mut data.trait_data, trait_type, table::new());
            };
            let trait_data_table = table::borrow_mut(&mut data.trait_data, trait_type);
            // let trait = Trait {
            //     name: vector::borrow(&traits, i).name,
            //     png: vector::borrow(&traits, i).png,
            // };
            let trait = *vector::borrow(&traits, i);
            table::upsert(trait_data_table, *vector::borrow(&trait_ids, i), trait);

            i = i + 1;
        }
    }

    public fun get_token_traits(token_id: TokenId): (bool, u8, u8, u8, u8, u8, u8, u8, u8, u8) acquires Data {
        let token_creator = token_helper::get_token_signer_address();
        let properties = token::get_property_map(token_creator, token_id);
        let data = borrow_global_mut<Data>(@woolf_deployer);

        let is_sheep = property_map::read_bool(&properties, &string::utf8(b"IsSheep"));
        let fur = property_map::read_u8(&properties, vector::borrow(&data.trait_types, 0));
        let head = property_map::read_u8(&properties, vector::borrow(&data.trait_types, 1));
        let ears = property_map::read_u8(&properties, vector::borrow(&data.trait_types, 2));
        let eyes = property_map::read_u8(&properties, vector::borrow(&data.trait_types, 3));
        let nose = property_map::read_u8(&properties, vector::borrow(&data.trait_types, 4));
        let mouth = property_map::read_u8(&properties, vector::borrow(&data.trait_types, 5));
        let neck = property_map::read_u8(&properties, vector::borrow(&data.trait_types, 6));
        let feet = property_map::read_u8(&properties, vector::borrow(&data.trait_types, 7));
        let alpha_index = property_map::read_u8(&properties, vector::borrow(&data.trait_types, 8));
        debug::print(&SheepWolf { is_sheep, fur, head, ears, eyes, nose, mouth, neck, feet, alpha_index });
        (is_sheep, fur, head, ears, eyes, nose, mouth, neck, feet, alpha_index)
    }

    public fun is_sheep(token_id: TokenId): bool acquires Data {
        let data = borrow_global<Data>(@woolf_deployer);
        if (table::contains(&data.token_traits, token_id)) {
            let sw = table::borrow(&data.token_traits, token_id);
            return sw.is_sheep
        };
        false
    }

    fun draw_trait(trait: Trait): String {
        let s: String = string::utf8(b"");
        string::append_utf8(&mut s, b"<image x=\"4\" y=\"4\" width=\"32\" height=\"32\" image-rendering=\"pixelated\" preserveAspectRatio=\"xMidYMid\" xlink:href=\"data:image/png;base64,");
        string::append(&mut s, trait.png);
        string::append_utf8(&mut s, b"\"/>");
        s
    }

    fun draw_trait_or_none(trait: Option<Trait>): String {
        if (option::is_some(&trait)) {
            draw_trait(option::extract(&mut trait))
        } else {
            string::utf8(b"")
        }
    }

    public fun draw_svg(token_id: TokenId): String acquires Data {
        let (is_sheep, fur, head, ears, eyes, nose, mouth, neck, feet, alpha_index) = get_token_traits(
            token_id
        );
        draw_svg_internal(is_sheep, fur, head, ears, eyes, nose, mouth, neck, feet, alpha_index)
    }

    fun draw_svg_internal(is_sheep: bool, fur: u8, head: u8, ears: u8, eyes: u8, nose: u8, mouth: u8, neck: u8, feet: u8, alpha_index: u8): String acquires Data {

        let shift: u8 = if (is_sheep) 0 else 9;
        let data = borrow_global_mut<Data>(@woolf_deployer);

        let s0 = option::some(*table::borrow(table::borrow(&data.trait_data, 0 + shift), fur));
        let s1 = if (is_sheep) {
            option::some(*table::borrow(table::borrow(&data.trait_data, 1 + shift), head))
        } else {
            option::some(*table::borrow(table::borrow(&data.trait_data, 1 + shift), alpha_index))
        };
        let s2 = if (is_sheep) option::some(
            *table::borrow(table::borrow(&data.trait_data, 2 + shift), ears)
        ) else option::none<Trait>();
        let s3 = option::some(*table::borrow(table::borrow(&data.trait_data, 3 + shift), eyes));
        let s4 = if (is_sheep) option::some(
            *table::borrow(table::borrow(&data.trait_data, 4 + shift), nose)
        ) else option::none<Trait>();
        let s5 = option::some(*table::borrow(table::borrow(&data.trait_data, 5 + shift), mouth));
        let s6 = if (is_sheep) option::none<Trait>() else option::some(
            *table::borrow(table::borrow(&data.trait_data, 6 + shift), neck)
        );
        let s7 = if (is_sheep) option::some(
            *table::borrow(table::borrow(&data.trait_data, 7 + shift), feet)
        ) else option::none<Trait>();

        let svg_string: String = string::utf8(b"");
        string::append_utf8(&mut svg_string, b"<svg id=\"woolf\" width=\"100%\" height=\"100%\" version=\"1.1\" viewBox=\"0 0 40 40\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">");
        string::append(&mut svg_string, draw_trait_or_none(s0));
        string::append(&mut svg_string, draw_trait_or_none(s1));
        string::append(&mut svg_string, draw_trait_or_none(s2));
        string::append(&mut svg_string, draw_trait_or_none(s3));
        string::append(&mut svg_string, draw_trait_or_none(s4));
        string::append(&mut svg_string, draw_trait_or_none(s5));
        string::append(&mut svg_string, draw_trait_or_none(s6));
        string::append(&mut svg_string, draw_trait_or_none(s7));
        string::append_utf8(&mut svg_string, b"</svg>");
        svg_string
    }

    fun attribute_for_type_and_value(trait_type: String, value: String): String {
        let s = string::utf8(b"");
        string::append_utf8(&mut s, b"{\"trait_type\":\"");
        string::append(&mut s, trait_type);
        string::append_utf8(&mut s, b"\",\"value\":\"");
        string::append(&mut s, value);
        string::append_utf8(&mut s, b"\"}");
        s
    }

    fun compile_attributes(token_id: TokenId): String acquires Data {
        let (is_sheep, fur, head, ears, eyes, nose, mouth, neck, feet, alpha_index) = get_token_traits(
            token_id
        );
        compile_attributes_internal(is_sheep, fur, head, ears, eyes, nose, mouth, neck, feet, alpha_index)
    }

    fun compile_attributes_internal(is_sheep: bool, fur: u8, head: u8, ears: u8, eyes: u8, nose: u8, mouth: u8, neck: u8, feet: u8, alpha_index: u8): String acquires Data {

        let s = vector[fur, head, ears, eyes, nose, mouth, neck, feet, alpha_index];
        let traits: String = string::utf8(b"");
        let data = borrow_global_mut<Data>(@woolf_deployer);
        if (is_sheep) {
            let types = vector[0, 1, 2, 3, 4, 5, 7];
            let i = 0;
            while (i < vector::length(&types)) {
                let index = *vector::borrow(&types, i);
                string::append(&mut traits, attribute_for_type_and_value(
                    *vector::borrow(&data.trait_types, index),
                    table::borrow(
                        table::borrow(&data.trait_data, (index as u8)),
                        *vector::borrow(&s, index)
                    ).name
                ));
                string::append_utf8(&mut traits, b",");
                i = i + 1;
            };
        } else {
            let types = vector[0, 1, 3, 5, 6];
            let sindice = vector[0, 8, 3, 5, 6];
            let i = 0;
            while (i < vector::length(&types)) {
                let index = *vector::borrow(&types, i);
                string::append(&mut traits, attribute_for_type_and_value(
                    *vector::borrow(&data.trait_types, index),
                    table::borrow(
                        table::borrow(&data.trait_data, (index as u8) + 9),
                        *vector::borrow(&s, *vector::borrow(&sindice, i))
                    ).name
                ));
                string::append_utf8(&mut traits, b",");
                i = i + 1;
            };
            string::append(&mut traits, attribute_for_type_and_value(
                string::utf8(b"Alpha"),
                string::utf8(*vector::borrow(&data.alphas, (*vector::borrow(&s, 8) as u64))) // alpha_index
            ));
            string::append_utf8(&mut traits, b",");
        };
        let attributes: String = string::utf8(b"");
        string::append_utf8(&mut attributes, b"[");
        string::append(&mut attributes, traits);
        string::append_utf8(&mut attributes, b"{\"trait_type\":\"Generation\",\"value\":");
        string::append_utf8(&mut attributes, if (is_sheep) b"\"Gen 0\"" else b"\"Gen 1\"");
        string::append_utf8(&mut attributes, b"},{\"trait_type\":\"Type\",\"value\":");
        string::append_utf8(&mut attributes, if (is_sheep) b"\"Sheep\"" else b"\"Wolf\"");
        string::append_utf8(&mut attributes, b"}]");

        attributes
    }

    public(friend) fun token_uri(token_id: TokenId): String acquires Data {
        let (is_sheep, fur, head, ears, eyes, nose, mouth, neck, feet, alpha_index) = get_token_traits(
            token_id
        );
        token_uri_internal(is_sheep, fur, head, ears, eyes, nose, mouth, neck, feet, alpha_index)
    }

    fun token_uri_internal(
        is_sheep: bool, fur: u8, head: u8, ears: u8, eyes: u8, nose: u8, mouth: u8, neck: u8, feet: u8, alpha_index: u8
    ): String acquires Data {
        let metadata = string::utf8(b"");
        string::append_utf8(&mut metadata, b"{\"name\": \"");
        string::append_utf8(&mut metadata, if (is_sheep) b"Sheep #" else b"Wolf #");
        string::append_utf8(&mut metadata, b"tokenId"); // FIXME: token id
        string::append_utf8(&mut metadata, b"\", \"description\": \"Thousands of Sheep and Wolves compete on a farm in the metaverse. A tempting prize of $WOOL awaits, with deadly high stakes. All the metadata and images are generated and stored 100% on-chain. No IPFS. NO API. Just the Ethereum blockchain.\", \"image\": \"data:image/svg+xml;base64,");
        string::append_utf8(&mut metadata, base64::encode(string::bytes(&draw_svg_internal(is_sheep, fur, head, ears, eyes, nose, mouth, neck, feet, alpha_index))));
        string::append_utf8(&mut metadata, b"\", \"attributes\":");
        string::append(&mut metadata, compile_attributes_internal(is_sheep, fur, head, ears, eyes, nose, mouth, neck, feet, alpha_index));
        string::append_utf8(&mut metadata, b"}");
        let uri = string::utf8(b"data:application/json;base64,");
        string::append_utf8(&mut uri, base64::encode(string::bytes(&metadata)));
        uri
    }

    #[test(admin = @woolf_deployer)]
    fun test_upload_traits(admin: &signer) acquires Data {
        initialize(admin);
        let trait_type: u8 = 8;
        let trait_ids: vector<u8> = vector[1, 2];
        let traits: vector<Trait> = vector[
            Trait { name: string::utf8(b"1"), png: string::utf8(b"1") },
            Trait { name: string::utf8(b"2"), png: string::utf8(b"2") }
        ];
        upload_traits(trait_type, trait_ids, traits);

        let data = borrow_global<Data>(signer::address_of(admin));
        assert!(table::borrow(table::borrow(&data.trait_data, trait_type), 1).png == string::utf8(b"1"), 0);
    }
    #[test]
    fun test_draw_trait() {
        draw_trait(Trait { name: string::utf8(b"1"), png: string::utf8(b"1") });
    }

    #[test(admin = @woolf_deployer)]
    fun test_compile_attributes_internal(admin: &signer) acquires Data {
        initialize(admin);
        let _s = compile_attributes_internal(true, 0,0,0,0,0,0,0,0,0);
        // debug::print(&s);
        let _w = compile_attributes_internal(false, 0,0,0,0,0,0,0,0,0);
        // debug::print(&w);
    }

    #[test(admin = @woolf_deployer)]
    fun test_draw_svg_internal(admin: &signer) acquires Data {
        initialize(admin);
        let _s = draw_svg_internal(true, 1,0,0,1,0,0,0,0,0);
        // debug::print(&_s);
    }

    #[test(admin = @woolf_deployer)]
    fun test_token_uri_internal(admin: &signer) acquires Data {
        initialize(admin);
        let _s = token_uri_internal(true, 1,0,0,1,0,0,0,0,0);
        // debug::print(&_s);
    }
}
